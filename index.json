{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Explore the APIs | MADE Uno",
    "keywords": "Explore the APIs Here you'll find all of the generated code documentation for the MADE Uno projects, similar to what you might find on Microsoft Docs! This documentation is designed to show you how each component of MADE Uno is constructed and provide a reference for you when building your projects."
  },
  "api/MADE.UI.Controls.Chip.html": {
    "href": "api/MADE.UI.Controls.Chip.html",
    "title": "Class Chip | MADE Uno",
    "keywords": "Class Chip Defines a control for displaying a value as a chip with remove capabilities. Inheritance System.Object ContentControl Chip Implements IControl IView IChip Inherited Members ContentControl.ViewLoaded ContentControl.IsVisibleChanged ContentControl.IsVisible ContentControl.GetChildView<TView>(String) Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.ChipBox.dll Syntax public sealed class Chip : ContentControl, IControl, IView, IChip Constructors | Improve this Doc View Source Chip() Initializes a new instance of the Chip class. Declaration public Chip() Fields | Improve this Doc View Source CanRemoveProperty Identifies the CanRemove dependency property. Declaration public static readonly DependencyProperty CanRemoveProperty Field Value Type Description DependencyProperty | Improve this Doc View Source RemoveCommandProperty Identifies the RemoveCommand dependency property. Declaration public static readonly DependencyProperty RemoveCommandProperty Field Value Type Description DependencyProperty Properties | Improve this Doc View Source CanRemove Gets or sets a value indicating whether the chip can be removed. Declaration public bool CanRemove { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source RemoveButton Gets the view representing the remove chip button. Declaration public Button RemoveButton { get; } Property Value Type Description Button | Improve this Doc View Source RemoveCommand Gets or sets the associated with when the user pressed the remove chip button. Declaration public ICommand RemoveCommand { get; set; } Property Value Type Description ICommand Methods | Improve this Doc View Source OnApplyTemplate() Loads the relevant control template so that its parts can be referenced. Declaration protected override void OnApplyTemplate() | Improve this Doc View Source OnCreateAutomationPeer() Provides the class-specific ChipAutomationPeer implementation for the Microsoft UI Automation infrastructure. Declaration protected override AutomationPeer OnCreateAutomationPeer() Returns Type Description AutomationPeer The class-specific ChipAutomationPeer instance. Events | Improve this Doc View Source Removed Occurs when the user pressed the remove chip button. Declaration public event ChipRemovedEventHandler Removed Event Type Type Description ChipRemovedEventHandler Implements IControl IView IChip"
  },
  "api/MADE.UI.Controls.ChipAutomationPeer.html": {
    "href": "api/MADE.UI.Controls.ChipAutomationPeer.html",
    "title": "Class ChipAutomationPeer | MADE Uno",
    "keywords": "Class ChipAutomationPeer Defines a framework element automation peer for the Chip control. Inheritance System.Object ChipAutomationPeer Implements IValueProvider Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.ChipBox.dll Syntax public class ChipAutomationPeer : FrameworkElementAutomationPeer Constructors | Improve this Doc View Source ChipAutomationPeer(Chip) Initializes a new instance of the ChipAutomationPeer class. Declaration public ChipAutomationPeer(Chip owner) Parameters Type Name Description Chip owner The Chip that is associated with this . Properties | Improve this Doc View Source IsReadOnly Gets a value that indicates whether the value of a control is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean true if the value is read-only; false if it can be modified. | Improve this Doc View Source Value Gets the value of the control. Declaration public string Value { get; } Property Value Type Description System.String The value of the control. Methods | Improve this Doc View Source GetAutomationControlTypeCore() Gets the control type for the element that is associated with the UI Automation peer. Declaration protected override AutomationControlType GetAutomationControlTypeCore() Returns Type Description AutomationControlType The control type. | Improve this Doc View Source GetClassNameCore() Provides the type name of the ChipBox when a Microsoft UI Automation client calls GetClassName or an equivalent Microsoft UI Automation client API. Declaration protected override string GetClassNameCore() Returns Type Description System.String The type name of the ChipBox . | Improve this Doc View Source GetNameCore() Provides the name given to the ChipBox when a Microsoft UI Automation client calls GetName or an equivalent Microsoft UI Automation client API. Declaration protected override string GetNameCore() Returns Type Description System.String The name of the ChipBox . | Improve this Doc View Source GetPatternCore(PatternInterface) Provides the interaction patterns associated with the Chip when a Microsoft UI Automation client calls GetPattern or an equivalent Microsoft UI Automation client API. Declaration protected override object GetPatternCore(PatternInterface patternInterface) Parameters Type Name Description PatternInterface patternInterface A value from the PatternInterface enumeration. Returns Type Description System.Object This if it supports the pattern interface; otherwise, null. | Improve this Doc View Source SetValue(String) Sets the value of a control. Declaration public void SetValue(string value) Parameters Type Name Description System.String value The value to set. The provider is responsible for converting the value to the appropriate data type. Implements IValueProvider"
  },
  "api/MADE.UI.Controls.ChipBox.html": {
    "href": "api/MADE.UI.Controls.ChipBox.html",
    "title": "Class ChipBox | MADE Uno",
    "keywords": "Class ChipBox Defines a control for providing multi value input for a text box. Inheritance System.Object Control ChipBox Implements IControl IView IChipBox Inherited Members Control.ViewLoaded Control.IsVisibleChanged Control.IsVisible Control.GetChildView<TView>(String) Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.ChipBox.dll Syntax public class ChipBox : Control, IControl, IView, IChipBox Constructors | Improve this Doc View Source ChipBox() Initializes a new instance of the ChipBox class. Declaration public ChipBox() Fields | Improve this Doc View Source AllowDuplicateProperty Identifies the AllowDuplicate dependency property. Declaration public static readonly DependencyProperty AllowDuplicateProperty Field Value Type Description DependencyProperty | Improve this Doc View Source AllowFreeTextProperty Identifies the AllowFreeText dependency property. Declaration public static readonly DependencyProperty AllowFreeTextProperty Field Value Type Description DependencyProperty | Improve this Doc View Source ChipContentTemplateProperty Identifies the ChipContentTemplate dependency property. Declaration public static readonly DependencyProperty ChipContentTemplateProperty Field Value Type Description DependencyProperty | Improve this Doc View Source ChipItemsViewStyleProperty Identifies the ChipItemsViewStyle dependency property. Declaration public static readonly DependencyProperty ChipItemsViewStyleProperty Field Value Type Description DependencyProperty | Improve this Doc View Source ChipRemoveCommandProperty Identifies the ChipRemoveCommand dependency property. Declaration public static readonly DependencyProperty ChipRemoveCommandProperty Field Value Type Description DependencyProperty | Improve this Doc View Source ChipsProperty Identifies the Chips dependency property. Declaration public static readonly DependencyProperty ChipsProperty Field Value Type Description DependencyProperty | Improve this Doc View Source HeaderProperty Identifies the Header dependency property. Declaration public static readonly DependencyProperty HeaderProperty Field Value Type Description DependencyProperty | Improve this Doc View Source HeaderTemplateProperty Identifies the HeaderTemplate dependency property. Declaration public static readonly DependencyProperty HeaderTemplateProperty Field Value Type Description DependencyProperty | Improve this Doc View Source IsReadonlyProperty Identifies the IsReadonly dependency property. Declaration public static readonly DependencyProperty IsReadonlyProperty Field Value Type Description DependencyProperty | Improve this Doc View Source SuggestionsItemTemplateProperty Identifies the SuggestionsItemTemplate dependency property. Declaration public static readonly DependencyProperty SuggestionsItemTemplateProperty Field Value Type Description DependencyProperty | Improve this Doc View Source SuggestionsProperty Identifies the Suggestions dependency property. Declaration public static readonly DependencyProperty SuggestionsProperty Field Value Type Description DependencyProperty | Improve this Doc View Source TextChangeCommandProperty Identifies the TextChangeCommand dependency property. Declaration public static readonly DependencyProperty TextChangeCommandProperty Field Value Type Description DependencyProperty Properties | Improve this Doc View Source AllowDuplicate Gets or sets a value indicating whether to allow duplicate values to be accepted. Declaration public bool AllowDuplicate { get; set; } Property Value Type Description System.Boolean Remarks The default value is True. | Improve this Doc View Source AllowFreeText Gets or sets a value indicating whether to allow free text input. Declaration public bool AllowFreeText { get; set; } Property Value Type Description System.Boolean Remarks The default value is True. | Improve this Doc View Source ChipContentTemplate Gets or sets the template associated with the content displayed in the chip. Declaration public DataTemplate ChipContentTemplate { get; set; } Property Value Type Description DataTemplate | Improve this Doc View Source ChipItemsView Gets the view representing the chip items. Declaration public ItemsControl ChipItemsView { get; } Property Value Type Description ItemsControl | Improve this Doc View Source ChipItemsViewStyle Gets or sets the style of the items view. Declaration public Style ChipItemsViewStyle { get; set; } Property Value Type Description Style | Improve this Doc View Source ChipRemoveCommand Gets or sets the associated with when a chip has been removed. Declaration public ICommand ChipRemoveCommand { get; set; } Property Value Type Description ICommand | Improve this Doc View Source Chips Gets or sets an object source used to generate the chip content of the control. Declaration public IList<ChipItem> Chips { get; set; } Property Value Type Description IList < ChipItem > | Improve this Doc View Source Header Gets or sets the content for the control's header. Declaration public object Header { get; set; } Property Value Type Description System.Object | Improve this Doc View Source HeaderTemplate Gets or sets the template used to display the content of the control's header. Declaration public DataTemplate HeaderTemplate { get; set; } Property Value Type Description DataTemplate | Improve this Doc View Source IsReadonly Gets or sets a value indicating whether the control is in a read-only state. Declaration public bool IsReadonly { get; set; } Property Value Type Description System.Boolean Remarks The default value is False. | Improve this Doc View Source Suggestions Gets or sets the suggestions that are displayed to the user when typing. Declaration public object Suggestions { get; set; } Property Value Type Description System.Object | Improve this Doc View Source SuggestionsItemTemplate Gets or sets the template used to display the suggestions that are displayed to the user when typing. Declaration public DataTemplate SuggestionsItemTemplate { get; set; } Property Value Type Description DataTemplate | Improve this Doc View Source TextBox Gets the view representing the text input for chips. Declaration public AutoSuggestBox TextBox { get; } Property Value Type Description AutoSuggestBox | Improve this Doc View Source TextChangeCommand Gets or sets the associated with when the text has changed within the suggestion box. Declaration public ICommand TextChangeCommand { get; set; } Property Value Type Description ICommand Methods | Improve this Doc View Source OnApplyTemplate() Loads the relevant control template so that its parts can be referenced. Declaration protected override void OnApplyTemplate() | Improve this Doc View Source OnCreateAutomationPeer() Provides the class-specific ChipBoxAutomationPeer implementation for the Microsoft UI Automation infrastructure. Declaration protected override AutomationPeer OnCreateAutomationPeer() Returns Type Description AutomationPeer The class-specific ChipBoxAutomationPeer instance. Events | Improve this Doc View Source ChipRemoved Occurs when a chip has been removed. Declaration public event ChipBoxChipRemovedEventHandler ChipRemoved Event Type Type Description ChipBoxChipRemovedEventHandler | Improve this Doc View Source TextChanged Occurs when the text has changed within the suggestion box. Declaration public event ChipBoxTextChangedEventHandler TextChanged Event Type Type Description ChipBoxTextChangedEventHandler Implements IControl IView IChipBox"
  },
  "api/MADE.UI.Controls.ChipBoxAutomationPeer.html": {
    "href": "api/MADE.UI.Controls.ChipBoxAutomationPeer.html",
    "title": "Class ChipBoxAutomationPeer | MADE Uno",
    "keywords": "Class ChipBoxAutomationPeer Defines a framework element automation peer for the ChipBox control. Inheritance System.Object ChipBoxAutomationPeer Implements IValueProvider Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.ChipBox.dll Syntax public class ChipBoxAutomationPeer : FrameworkElementAutomationPeer Constructors | Improve this Doc View Source ChipBoxAutomationPeer(ChipBox) Initializes a new instance of the ChipBoxAutomationPeer class. Declaration public ChipBoxAutomationPeer(ChipBox owner) Parameters Type Name Description ChipBox owner The ChipBox that is associated with this . Properties | Improve this Doc View Source IsReadOnly Gets a value that indicates whether the value of a control is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean true if the value is read-only; false if it can be modified. | Improve this Doc View Source Value Gets the value of the control. Declaration public string Value { get; } Property Value Type Description System.String The value of the control. Methods | Improve this Doc View Source GetAutomationControlTypeCore() Gets the control type for the element that is associated with the UI Automation peer. Declaration protected override AutomationControlType GetAutomationControlTypeCore() Returns Type Description AutomationControlType The control type. | Improve this Doc View Source GetClassNameCore() Provides the type name of the ChipBox when a Microsoft UI Automation client calls GetClassName or an equivalent Microsoft UI Automation client API. Declaration protected override string GetClassNameCore() Returns Type Description System.String The type name of the ChipBox . | Improve this Doc View Source GetNameCore() Provides the name given to the ChipBox when a Microsoft UI Automation client calls GetName or an equivalent Microsoft UI Automation client API. Declaration protected override string GetNameCore() Returns Type Description System.String The name of the ChipBox . | Improve this Doc View Source GetPatternCore(PatternInterface) Provides the interaction patterns associated with the Chip when a Microsoft UI Automation client calls GetPattern or an equivalent Microsoft UI Automation client API. Declaration protected override object GetPatternCore(PatternInterface patternInterface) Parameters Type Name Description PatternInterface patternInterface A value from the PatternInterface enumeration. Returns Type Description System.Object This if it supports the pattern interface; otherwise, null. | Improve this Doc View Source SetValue(String) Sets the value of a control. Declaration public void SetValue(string value) Parameters Type Name Description System.String value The value to set. The provider is responsible for converting the value to the appropriate data type. Implements IValueProvider"
  },
  "api/MADE.UI.Controls.ChipBoxChipRemovedEventArgs.html": {
    "href": "api/MADE.UI.Controls.ChipBoxChipRemovedEventArgs.html",
    "title": "Class ChipBoxChipRemovedEventArgs | MADE Uno",
    "keywords": "Class ChipBoxChipRemovedEventArgs Defines an event argument for when a Chip is removed from a ChipBox . Inheritance System.Object ChipBoxChipRemovedEventArgs Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.ChipBox.dll Syntax public class ChipBoxChipRemovedEventArgs : RoutedEventArgs Constructors | Improve this Doc View Source ChipBoxChipRemovedEventArgs(Object) Initializes a new instance of the ChipBoxChipRemovedEventArgs class. Declaration public ChipBoxChipRemovedEventArgs(object content) Parameters Type Name Description System.Object content Properties | Improve this Doc View Source Content Gets the content of the chip that has been removed. Declaration public object Content { get; } Property Value Type Description System.Object"
  },
  "api/MADE.UI.Controls.ChipBoxChipRemovedEventHandler.html": {
    "href": "api/MADE.UI.Controls.ChipBoxChipRemovedEventHandler.html",
    "title": "Delegate ChipBoxChipRemovedEventHandler | MADE Uno",
    "keywords": "Delegate ChipBoxChipRemovedEventHandler Defines a delegate for the event which occurs when Chip is removed from a ChipBox . Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.ChipBox.dll Syntax public delegate void ChipBoxChipRemovedEventHandler(object sender, ChipBoxChipRemovedEventArgs args); Parameters Type Name Description System.Object sender The ChipBox . ChipBoxChipRemovedEventArgs args The event argument."
  },
  "api/MADE.UI.Controls.ChipBoxTextChangedEventArgs.html": {
    "href": "api/MADE.UI.Controls.ChipBoxTextChangedEventArgs.html",
    "title": "Class ChipBoxTextChangedEventArgs | MADE Uno",
    "keywords": "Class ChipBoxTextChangedEventArgs Defines an event argument for when the text of the ChipBox has changed. Inheritance System.Object ChipBoxTextChangedEventArgs Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.ChipBox.dll Syntax public class ChipBoxTextChangedEventArgs : RoutedEventArgs Constructors | Improve this Doc View Source ChipBoxTextChangedEventArgs(String) Initializes a new instance of the ChipBoxTextChangedEventArgs class with the changed text. Declaration public ChipBoxTextChangedEventArgs(string text) Parameters Type Name Description System.String text The text that has been changed to. Properties | Improve this Doc View Source Text Gets the text that has been changed to. Declaration public string Text { get; } Property Value Type Description System.String"
  },
  "api/MADE.UI.Controls.ChipBoxTextChangedEventHandler.html": {
    "href": "api/MADE.UI.Controls.ChipBoxTextChangedEventHandler.html",
    "title": "Delegate ChipBoxTextChangedEventHandler | MADE Uno",
    "keywords": "Delegate ChipBoxTextChangedEventHandler Defines a delegate for the event which occurs when the text of the ChipBox has changed. Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.ChipBox.dll Syntax public delegate void ChipBoxTextChangedEventHandler(object sender, ChipBoxTextChangedEventArgs args); Parameters Type Name Description System.Object sender The ChipBox . ChipBoxTextChangedEventArgs args The event argument."
  },
  "api/MADE.UI.Controls.ChipItem.html": {
    "href": "api/MADE.UI.Controls.ChipItem.html",
    "title": "Class ChipItem | MADE Uno",
    "keywords": "Class ChipItem Defines a wrapper for an item displayed as a chip. Inheritance System.Object ChipItem Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.ChipBox.dll Syntax public class ChipItem : object Constructors | Improve this Doc View Source ChipItem(Object) Initializes a new instance of the ChipItem class with the associated content. Declaration public ChipItem(object content) Parameters Type Name Description System.Object content The content of the chip to display. Properties | Improve this Doc View Source Content Gets or sets the content of the chip to display. Declaration public object Content { get; set; } Property Value Type Description System.Object Methods | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String A string that represents the current object."
  },
  "api/MADE.UI.Controls.ChipRemovedEventArgs.html": {
    "href": "api/MADE.UI.Controls.ChipRemovedEventArgs.html",
    "title": "Class ChipRemovedEventArgs | MADE Uno",
    "keywords": "Class ChipRemovedEventArgs Defines an event argument for when a Chip is removed. Inheritance System.Object ChipRemovedEventArgs Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.ChipBox.dll Syntax public class ChipRemovedEventArgs : RoutedEventArgs Constructors | Improve this Doc View Source ChipRemovedEventArgs(Object) Initializes a new instance of the ChipRemovedEventArgs class. Declaration public ChipRemovedEventArgs(object content) Parameters Type Name Description System.Object content Properties | Improve this Doc View Source Content Gets the content of the chip that has been removed. Declaration public object Content { get; } Property Value Type Description System.Object"
  },
  "api/MADE.UI.Controls.ChipRemovedEventHandler.html": {
    "href": "api/MADE.UI.Controls.ChipRemovedEventHandler.html",
    "title": "Delegate ChipRemovedEventHandler | MADE Uno",
    "keywords": "Delegate ChipRemovedEventHandler Defines a delegate for the event which occurs when Chip is removed. Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.ChipBox.dll Syntax public delegate void ChipRemovedEventHandler(object sender, ChipRemovedEventArgs args); Parameters Type Name Description System.Object sender The Chip . ChipRemovedEventArgs args The event argument."
  },
  "api/MADE.UI.Controls.ContentControl.html": {
    "href": "api/MADE.UI.Controls.ContentControl.html",
    "title": "Class ContentControl | MADE Uno",
    "keywords": "Class ContentControl Defines a UI element for creating custom controls with content in Windows applications. Inheritance System.Object ContentControl Chip InputValidator Implements IControl IView Namespace : MADE.UI.Controls Assembly : MADE.UI.dll Syntax public class ContentControl : Windows.UI.Xaml.Controls.ContentControl, IControl, IView Constructors | Improve this Doc View Source ContentControl() Initializes a new instance of the ContentControl class. Declaration public ContentControl() Properties | Improve this Doc View Source IsVisible Gets or sets a value indicating whether the view is visible in the UI. Declaration public bool IsVisible { get; set; } Property Value Type Description System.Boolean Exceptions Type Condition System.Exception A delegate callback throws an exception. Methods | Improve this Doc View Source GetChildView<TView>(String) Retrieves the element from the instantiated view by the given resource identifier. Declaration public TView GetChildView<TView>(string resourceName) where TView : class Parameters Type Name Description System.String resourceName The name of the resource to find. Returns Type Description TView Returns the view from the layout, if the view is found. Type Parameters Name Description TView The type of view to retrieve. Events | Improve this Doc View Source IsVisibleChanged Occurs when the IsVisible state has changed. Declaration public event EventHandler<bool> IsVisibleChanged Event Type Type Description EventHandler < System.Boolean > | Improve this Doc View Source ViewLoaded Occurs when the view has loaded. Declaration public event ViewLoadedEventHandler ViewLoaded Event Type Type Description ViewLoadedEventHandler Implements IControl IView"
  },
  "api/MADE.UI.Controls.Control.html": {
    "href": "api/MADE.UI.Controls.Control.html",
    "title": "Class Control | MADE Uno",
    "keywords": "Class Control Defines a UI element for creating custom controls in Windows applications. Inheritance System.Object Control ChipBox DropDownList FilePicker RichEditToolbar Implements IControl IView Namespace : MADE.UI.Controls Assembly : MADE.UI.dll Syntax public class Control : Windows.UI.Xaml.Controls.Control, IControl, IView Constructors | Improve this Doc View Source Control() Initializes a new instance of the Control class. Declaration public Control() Properties | Improve this Doc View Source IsVisible Gets or sets a value indicating whether the view is visible in the UI. Declaration public bool IsVisible { get; set; } Property Value Type Description System.Boolean Exceptions Type Condition System.Exception A delegate callback throws an exception. Methods | Improve this Doc View Source GetChildView<TView>(String) Retrieves the element from the instantiated view by the given resource identifier. Declaration public TView GetChildView<TView>(string resourceName) where TView : class Parameters Type Name Description System.String resourceName The name of the resource to find. Returns Type Description TView Returns the view from the layout, if the view is found. Type Parameters Name Description TView The type of view to retrieve. Events | Improve this Doc View Source IsVisibleChanged Occurs when the IsVisible state has changed. Declaration public event EventHandler<bool> IsVisibleChanged Event Type Type Description EventHandler < System.Boolean > | Improve this Doc View Source ViewLoaded Occurs when the view has loaded. Declaration public event ViewLoadedEventHandler ViewLoaded Event Type Type Description ViewLoadedEventHandler Implements IControl IView"
  },
  "api/MADE.UI.Controls.DropDownList.html": {
    "href": "api/MADE.UI.Controls.DropDownList.html",
    "title": "Class DropDownList | MADE Uno",
    "keywords": "Class DropDownList Defines a selection control that provides a drop-down list box that allows users to select one or multiple items from a list. Inheritance System.Object Control DropDownList Implements IControl IView IDropDownList IDropDownList2 Inherited Members Control.ViewLoaded Control.IsVisibleChanged Control.IsVisible Control.GetChildView<TView>(String) Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.DropDownList.dll Syntax public class DropDownList : Control, IControl, IView, IDropDownList, IDropDownList2 Constructors | Improve this Doc View Source DropDownList() Initializes a new instance of the DropDownList class. Declaration public DropDownList() Fields | Improve this Doc View Source ContentDelimiterProperty Identifies the ContentDelimiter dependency property. Declaration public static readonly DependencyProperty ContentDelimiterProperty Field Value Type Description DependencyProperty | Improve this Doc View Source ContentProperty Identifies the Content dependency property. Declaration public static readonly DependencyProperty ContentProperty Field Value Type Description DependencyProperty | Improve this Doc View Source ContentTemplateProperty Identifies the ContentTemplate dependency property. Declaration public static readonly DependencyProperty ContentTemplateProperty Field Value Type Description DependencyProperty | Improve this Doc View Source ContentTemplateSelectorProperty Identifies the ContentTemplateSelector dependency property. Declaration public static readonly DependencyProperty ContentTemplateSelectorProperty Field Value Type Description DependencyProperty | Improve this Doc View Source DropDownCloseCommandProperty Identifies the DropDownCloseCommand dependency property. Declaration public static readonly DependencyProperty DropDownCloseCommandProperty Field Value Type Description DependencyProperty | Improve this Doc View Source DropDownOpenCommandProperty Identifies the DropDownOpenCommand dependency property. Declaration public static readonly DependencyProperty DropDownOpenCommandProperty Field Value Type Description DependencyProperty | Improve this Doc View Source HeaderProperty Identifies the Header dependency property. Declaration public static readonly DependencyProperty HeaderProperty Field Value Type Description DependencyProperty | Improve this Doc View Source HeaderTemplateProperty Identifies the HeaderTemplate dependency property. Declaration public static readonly DependencyProperty HeaderTemplateProperty Field Value Type Description DependencyProperty | Improve this Doc View Source IsDropDownOpenProperty Identifies the IsDropDownOpen dependency property. Declaration public static readonly DependencyProperty IsDropDownOpenProperty Field Value Type Description DependencyProperty | Improve this Doc View Source ItemsPanelProperty Identifies the ItemsPanel dependency property. Declaration public static readonly DependencyProperty ItemsPanelProperty Field Value Type Description DependencyProperty | Improve this Doc View Source ItemsSourceProperty Identifies the ItemsSource dependency property. Declaration public static readonly DependencyProperty ItemsSourceProperty Field Value Type Description DependencyProperty | Improve this Doc View Source ItemTemplateProperty Identifies the ItemTemplate dependency property. Declaration public static readonly DependencyProperty ItemTemplateProperty Field Value Type Description DependencyProperty | Improve this Doc View Source ItemTemplateSelectorProperty Identifies the ItemTemplateSelector dependency property. Declaration public static readonly DependencyProperty ItemTemplateSelectorProperty Field Value Type Description DependencyProperty | Improve this Doc View Source MaxDropDownHeightProperty Identifies the MaxDropDownHeight dependency property. Declaration public static readonly DependencyProperty MaxDropDownHeightProperty Field Value Type Description DependencyProperty | Improve this Doc View Source SelectedItemProperty Identifies the SelectedItem dependency property. Declaration public static readonly DependencyProperty SelectedItemProperty Field Value Type Description DependencyProperty | Improve this Doc View Source SelectedItemsUpdateCommandProperty Identifies the SelectedItemsUpdateCommand dependency property. Declaration public static readonly DependencyProperty SelectedItemsUpdateCommandProperty Field Value Type Description DependencyProperty | Improve this Doc View Source SelectionChangeCommandProperty Identifies the SelectionChangeCommand dependency property. Declaration public static readonly DependencyProperty SelectionChangeCommandProperty Field Value Type Description DependencyProperty | Improve this Doc View Source SelectionModeProperty Identifies the SelectionMode dependency property. Declaration public static readonly DependencyProperty SelectionModeProperty Field Value Type Description DependencyProperty Properties | Improve this Doc View Source Content Gets or sets the content to display on the collapsed drop down. Declaration public object Content { get; set; } Property Value Type Description System.Object | Improve this Doc View Source ContentDelimiter Gets or sets the delimiter used to present the content. By default, the delimited is a comma followed by a space. Declaration public string ContentDelimiter { get; set; } Property Value Type Description System.String | Improve this Doc View Source ContentTemplate Gets or sets the DataTemplate used to display the content on the collapsed drop down. Declaration public DataTemplate ContentTemplate { get; set; } Property Value Type Description DataTemplate | Improve this Doc View Source ContentTemplateSelector Gets or sets a reference to a custom DataTemplateSelector logic class. The DataTemplateSelector referenced by this property returns a template to apply to the content on the collapsed drop down. Declaration public DataTemplateSelector ContentTemplateSelector { get; set; } Property Value Type Description DataTemplateSelector | Improve this Doc View Source DropDown Gets the view representing the drop down. Declaration public Popup DropDown { get; } Property Value Type Description Popup | Improve this Doc View Source DropDownBorder Gets the view representing the drop down content's border. Declaration public Border DropDownBorder { get; } Property Value Type Description Border | Improve this Doc View Source DropDownButton Gets the view representing the button that opens the drop down. Declaration public Button DropDownButton { get; } Property Value Type Description Button | Improve this Doc View Source DropDownCloseCommand Gets or sets the associated with when the drop-down closes. Declaration public ICommand DropDownCloseCommand { get; set; } Property Value Type Description ICommand | Improve this Doc View Source DropDownContent Gets the view representing the items that appear in the drop down. Declaration public ListView DropDownContent { get; } Property Value Type Description ListView | Improve this Doc View Source DropDownOpenCommand Gets or sets the associated with when the drop-down opens. Declaration public ICommand DropDownOpenCommand { get; set; } Property Value Type Description ICommand | Improve this Doc View Source Header Gets or sets the content for the control's header. Declaration public object Header { get; set; } Property Value Type Description System.Object | Improve this Doc View Source HeaderTemplate Gets or sets the DataTemplate used to display the content of the control's header. Declaration public DataTemplate HeaderTemplate { get; set; } Property Value Type Description DataTemplate | Improve this Doc View Source IsDropDownOpen Gets or sets a value indicating whether the drop-down is currently open. Declaration public bool IsDropDownOpen { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ItemsPanel Gets or sets the template that defines the panel that controls the layout of items. Declaration public ItemsPanelTemplate ItemsPanel { get; set; } Property Value Type Description ItemsPanelTemplate | Improve this Doc View Source ItemsSource Gets or sets an object source used to generate the content of the control. Declaration public object ItemsSource { get; set; } Property Value Type Description System.Object | Improve this Doc View Source ItemTemplate Gets or sets the DataTemplate used to display each item. Declaration public DataTemplate ItemTemplate { get; set; } Property Value Type Description DataTemplate | Improve this Doc View Source ItemTemplateSelector Gets or sets a reference to a custom DataTemplateSelector logic class. The DataTemplateSelector referenced by this property returns a template to apply to items. Declaration public DataTemplateSelector ItemTemplateSelector { get; set; } Property Value Type Description DataTemplateSelector | Improve this Doc View Source MaxDropDownHeight Gets or sets the maximum height for the drop-down. Declaration public double MaxDropDownHeight { get; set; } Property Value Type Description System.Double | Improve this Doc View Source SelectedItem Gets or sets the selected item. Declaration public object SelectedItem { get; set; } Property Value Type Description System.Object | Improve this Doc View Source SelectedItems Gets the currently selected items. Declaration public IList<object> SelectedItems { get; } Property Value Type Description IList < System.Object > | Improve this Doc View Source SelectedItemsUpdateCommand Gets or sets the associated with when the selected items has updated. Declaration public ICommand SelectedItemsUpdateCommand { get; set; } Property Value Type Description ICommand | Improve this Doc View Source SelectionChangeCommand Gets or sets the associated with when the currently selected item changes. Declaration public ICommand SelectionChangeCommand { get; set; } Property Value Type Description ICommand | Improve this Doc View Source SelectionMode Gets or sets the selection behavior. Declaration public DropDownListSelectionMode SelectionMode { get; set; } Property Value Type Description DropDownListSelectionMode Methods | Improve this Doc View Source OnApplyTemplate() Loads the relevant control template so that its parts can be referenced. Declaration protected override void OnApplyTemplate() | Improve this Doc View Source OnCreateAutomationPeer() Provides the class-specific DropDownListAutomationPeer implementation for the Microsoft UI Automation infrastructure. Declaration protected override AutomationPeer OnCreateAutomationPeer() Returns Type Description AutomationPeer The class-specific DropDownListAutomationPeer instance. Events | Improve this Doc View Source DropDownClosed Occurs when the drop-down closes. Declaration public event EventHandler<object> DropDownClosed Event Type Type Description EventHandler < System.Object > | Improve this Doc View Source DropDownOpened Occurs when the drop-down opens. Declaration public event EventHandler<object> DropDownOpened Event Type Type Description EventHandler < System.Object > | Improve this Doc View Source SelectedItemsUpdated Occurs when the selected items has updated. Declaration public event DropDownListSelectedItemsUpdatedEventHandler SelectedItemsUpdated Event Type Type Description DropDownListSelectedItemsUpdatedEventHandler | Improve this Doc View Source SelectionChanged Occurs when the currently selected item changes. Declaration public event SelectionChangedEventHandler SelectionChanged Event Type Type Description SelectionChangedEventHandler Implements IControl IView IDropDownList IDropDownList2"
  },
  "api/MADE.UI.Controls.DropDownListAutomationPeer.html": {
    "href": "api/MADE.UI.Controls.DropDownListAutomationPeer.html",
    "title": "Class DropDownListAutomationPeer | MADE Uno",
    "keywords": "Class DropDownListAutomationPeer Defines a framework element automation peer for the DropDownList control. Inheritance System.Object DropDownListAutomationPeer Implements ISelectionProvider Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.DropDownList.dll Syntax public class DropDownListAutomationPeer : FrameworkElementAutomationPeer Constructors | Improve this Doc View Source DropDownListAutomationPeer(DropDownList) Initializes a new instance of the DropDownListAutomationPeer class. Declaration public DropDownListAutomationPeer(DropDownList owner) Parameters Type Name Description DropDownList owner The DropDownList that is associated with this . Properties | Improve this Doc View Source CanSelectMultiple Gets a value indicating whether the Microsoft UI Automation provider allows more than one child element to be selected concurrently. Declaration public bool CanSelectMultiple { get; } Property Value Type Description System.Boolean True if multiple selection is allowed; otherwise, false. | Improve this Doc View Source IsSelectionRequired Gets a value indicating whether the UI Automation provider requires at least one child element to be selected. Declaration public bool IsSelectionRequired { get; } Property Value Type Description System.Boolean False. Methods | Improve this Doc View Source GetAutomationControlTypeCore() Gets the control type for the element that is associated with the UI Automation peer. Declaration protected override AutomationControlType GetAutomationControlTypeCore() Returns Type Description AutomationControlType The control type. | Improve this Doc View Source GetClassNameCore() Provides the type name of the DropDownList when a Microsoft UI Automation client calls GetClassName or an equivalent Microsoft UI Automation client API. Declaration protected override string GetClassNameCore() Returns Type Description System.String The type name of the DropDownList . | Improve this Doc View Source GetNameCore() Provides the name given to the DropDownList when a Microsoft UI Automation client calls GetName or an equivalent Microsoft UI Automation client API. Declaration protected override string GetNameCore() Returns Type Description System.String The name of the DropDownList . | Improve this Doc View Source GetPatternCore(PatternInterface) Provides the interaction patterns associated with the DropDownList when a Microsoft UI Automation client calls GetPattern or an equivalent Microsoft UI Automation client API. Declaration protected override object GetPatternCore(PatternInterface patternInterface) Parameters Type Name Description PatternInterface patternInterface A value from the PatternInterface enumeration. Returns Type Description System.Object This if it supports the pattern interface; otherwise, null. | Improve this Doc View Source GetSelection() Retrieves a UI Automation provider for each child element that is selected. Declaration public IRawElementProviderSimple[] GetSelection() Returns Type Description IRawElementProviderSimple [] An array of UI Automation providers. Implements ISelectionProvider"
  },
  "api/MADE.UI.Controls.DropDownListSelectedItemsUpdatedEventArgs.html": {
    "href": "api/MADE.UI.Controls.DropDownListSelectedItemsUpdatedEventArgs.html",
    "title": "Class DropDownListSelectedItemsUpdatedEventArgs | MADE Uno",
    "keywords": "Class DropDownListSelectedItemsUpdatedEventArgs Defines an event argument for when the DropDownList selected items has updated. Inheritance System.Object DropDownListSelectedItemsUpdatedEventArgs Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.DropDownList.dll Syntax public class DropDownListSelectedItemsUpdatedEventArgs : RoutedEventArgs Constructors | Improve this Doc View Source DropDownListSelectedItemsUpdatedEventArgs(IEnumerable<Object>) Initializes a new instance of the DropDownListSelectedItemsUpdatedEventArgs class. Declaration public DropDownListSelectedItemsUpdatedEventArgs(IEnumerable<object> selectedItems) Parameters Type Name Description IEnumerable < System.Object > selectedItems Properties | Improve this Doc View Source SelectedItems Gets the updated selected items. Declaration public IEnumerable<object> SelectedItems { get; } Property Value Type Description IEnumerable < System.Object >"
  },
  "api/MADE.UI.Controls.DropDownListSelectedItemsUpdatedEventHandler.html": {
    "href": "api/MADE.UI.Controls.DropDownListSelectedItemsUpdatedEventHandler.html",
    "title": "Delegate DropDownListSelectedItemsUpdatedEventHandler | MADE Uno",
    "keywords": "Delegate DropDownListSelectedItemsUpdatedEventHandler Defines a delegate for the event which occurs when the DropDownList selected items has updated. Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.DropDownList.dll Syntax public delegate void DropDownListSelectedItemsUpdatedEventHandler(object sender, DropDownListSelectedItemsUpdatedEventArgs args); Parameters Type Name Description System.Object sender The DropDownList . DropDownListSelectedItemsUpdatedEventArgs args The event argument."
  },
  "api/MADE.UI.Controls.DropDownListSelectionMode.html": {
    "href": "api/MADE.UI.Controls.DropDownListSelectionMode.html",
    "title": "Enum DropDownListSelectionMode | MADE Uno",
    "keywords": "Enum DropDownListSelectionMode Defines constants that specify the selection mode of the IDropDownList . Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.DropDownList.dll Syntax public enum DropDownListSelectionMode : int Fields Name Description Multiple The user can select multiple items. Single A user can select a single item."
  },
  "api/MADE.UI.Controls.FilePicker.html": {
    "href": "api/MADE.UI.Controls.FilePicker.html",
    "title": "Class FilePicker | MADE Uno",
    "keywords": "Class FilePicker Defines an input control that provides a user with the ability to select files. Inheritance System.Object Control FilePicker Implements IControl IView IFilePicker Inherited Members Control.ViewLoaded Control.IsVisibleChanged Control.IsVisible Control.GetChildView<TView>(String) Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.FilePicker.dll Syntax public class FilePicker : Control, IControl, IView, IFilePicker Constructors | Improve this Doc View Source FilePicker() Initializes a new instance of the FilePicker class. Declaration public FilePicker() Fields | Improve this Doc View Source AppendFilesProperty Identifies the AppendFiles dependency property. Declaration public static readonly DependencyProperty AppendFilesProperty Field Value Type Description DependencyProperty | Improve this Doc View Source ChooseFileButtonContentProperty Identifies the ChooseFileButtonContent dependency property. Declaration public static readonly DependencyProperty ChooseFileButtonContentProperty Field Value Type Description DependencyProperty | Improve this Doc View Source ChooseFileButtonContentTemplateProperty Identifies the ChooseFileButtonContentTemplate dependency property. Declaration public static readonly DependencyProperty ChooseFileButtonContentTemplateProperty Field Value Type Description DependencyProperty | Improve this Doc View Source FilesProperty Identifies the Files dependency property. Declaration public static readonly DependencyProperty FilesProperty Field Value Type Description DependencyProperty | Improve this Doc View Source FileTypesProperty Identifies the FileTypes dependency property. Declaration public static readonly DependencyProperty FileTypesProperty Field Value Type Description DependencyProperty | Improve this Doc View Source HeaderProperty Identifies the Header dependency property. Declaration public static readonly DependencyProperty HeaderProperty Field Value Type Description DependencyProperty | Improve this Doc View Source HeaderTemplateProperty Identifies the HeaderTemplate dependency property. Declaration public static readonly DependencyProperty HeaderTemplateProperty Field Value Type Description DependencyProperty | Improve this Doc View Source ItemsViewStyleProperty Identifies the ItemsViewStyle dependency property. Declaration public static readonly DependencyProperty ItemsViewStyleProperty Field Value Type Description DependencyProperty | Improve this Doc View Source SelectionModeProperty Identifies the SelectionMode dependency property. Declaration public static readonly DependencyProperty SelectionModeProperty Field Value Type Description DependencyProperty Properties | Improve this Doc View Source AppendFiles Gets or sets a value indicating whether to append files with subsequent file choices. Declaration public bool AppendFiles { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ChooseFileButton Gets the view representing the button that opens the file picker. Declaration public Button ChooseFileButton { get; } Property Value Type Description Button | Improve this Doc View Source ChooseFileButtonContent Gets or sets the content of the choose file button. Declaration public object ChooseFileButtonContent { get; set; } Property Value Type Description System.Object | Improve this Doc View Source ChooseFileButtonContentTemplate Gets or sets the data template that is used to display the content of the choose file button. Declaration public DataTemplate ChooseFileButtonContentTemplate { get; set; } Property Value Type Description DataTemplate | Improve this Doc View Source Files Gets or sets the files chosen. Declaration public IList Files { get; set; } Property Value Type Description IList | Improve this Doc View Source FileTypes Gets or sets the file types supported by the input. Declaration public IEnumerable FileTypes { get; set; } Property Value Type Description IEnumerable | Improve this Doc View Source Header Gets or sets the data used for the header of the control. Declaration public object Header { get; set; } Property Value Type Description System.Object | Improve this Doc View Source HeaderTemplate Gets or sets the template used to display the content of the control's header. Declaration public DataTemplate HeaderTemplate { get; set; } Property Value Type Description DataTemplate | Improve this Doc View Source ItemsView Gets the view representing the items that have been picked. Declaration public ListViewBase ItemsView { get; } Property Value Type Description ListViewBase | Improve this Doc View Source ItemsViewStyle Gets or sets the style of the items view. Declaration public Style ItemsViewStyle { get; set; } Property Value Type Description Style | Improve this Doc View Source SelectionMode Gets or sets the file picker selection mode. Declaration public FilePickerSelectionMode SelectionMode { get; set; } Property Value Type Description FilePickerSelectionMode Methods | Improve this Doc View Source OnApplyTemplate() Loads the relevant control template so that its parts can be referenced. Declaration protected override void OnApplyTemplate() | Improve this Doc View Source OnCreateAutomationPeer() Provides the class-specific FilePickerAutomationPeer implementation for the Microsoft UI Automation infrastructure. Declaration protected override AutomationPeer OnCreateAutomationPeer() Returns Type Description AutomationPeer The class-specific FilePickerAutomationPeer instance. Events | Improve this Doc View Source ItemClick Occurs when an item in the list receives an interaction. Declaration public event FilePickerItemClickEventHandler ItemClick Event Type Type Description FilePickerItemClickEventHandler Implements IControl IView IFilePicker"
  },
  "api/MADE.UI.Controls.FilePickerAutomationPeer.html": {
    "href": "api/MADE.UI.Controls.FilePickerAutomationPeer.html",
    "title": "Class FilePickerAutomationPeer | MADE Uno",
    "keywords": "Class FilePickerAutomationPeer Defines a framework element automation peer for the FilePicker control. Inheritance System.Object FilePickerAutomationPeer Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.FilePicker.dll Syntax public class FilePickerAutomationPeer : FrameworkElementAutomationPeer Constructors | Improve this Doc View Source FilePickerAutomationPeer(FilePicker) Initializes a new instance of the FilePickerAutomationPeer class. Declaration public FilePickerAutomationPeer(FilePicker owner) Parameters Type Name Description FilePicker owner The FilePicker that is associated with this . Methods | Improve this Doc View Source GetAutomationControlTypeCore() Gets the control type for the element that is associated with the UI Automation peer. Declaration protected override AutomationControlType GetAutomationControlTypeCore() Returns Type Description AutomationControlType The control type. | Improve this Doc View Source GetClassNameCore() Provides the type name of the FilePicker when a Microsoft UI Automation client calls GetClassName or an equivalent Microsoft UI Automation client API. Declaration protected override string GetClassNameCore() Returns Type Description System.String The type name of the FilePicker . | Improve this Doc View Source GetNameCore() Provides the name given to the FilePicker when a Microsoft UI Automation client calls GetName or an equivalent Microsoft UI Automation client API. Declaration protected override string GetNameCore() Returns Type Description System.String The name of the FilePicker ."
  },
  "api/MADE.UI.Controls.FilePickerItem.html": {
    "href": "api/MADE.UI.Controls.FilePickerItem.html",
    "title": "Class FilePickerItem | MADE Uno",
    "keywords": "Class FilePickerItem Defines a wrapper for an item chosen by the file picker. Inheritance System.Object FilePickerItem Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.FilePicker.dll Syntax public class FilePickerItem : object Properties | Improve this Doc View Source DisplayName Gets a user-friendly name for the file. Declaration public string DisplayName { get; } Property Value Type Description System.String | Improve this Doc View Source File Gets or sets the file. Declaration public StorageFile File { get; set; } Property Value Type Description StorageFile | Improve this Doc View Source FileType Gets the type (file name extension) of the file. Declaration public string FileType { get; } Property Value Type Description System.String | Improve this Doc View Source Name Gets the name of the file including the file name extension. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Path Gets the full file-system path of the current file, if the file has a path. Declaration public string Path { get; } Property Value Type Description System.String | Improve this Doc View Source Thumbnail Gets the thumbnail for the file. Declaration public BitmapImage Thumbnail { get; } Property Value Type Description BitmapImage Methods | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String A string that represents the current object."
  },
  "api/MADE.UI.Controls.FilePickerItemClickEventArgs.html": {
    "href": "api/MADE.UI.Controls.FilePickerItemClickEventArgs.html",
    "title": "Class FilePickerItemClickEventArgs | MADE Uno",
    "keywords": "Class FilePickerItemClickEventArgs Defines an event argument for when a file picker item is clicked from the list. Inheritance System.Object FilePickerItemClickEventArgs Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.FilePicker.dll Syntax public class FilePickerItemClickEventArgs : RoutedEventArgs Constructors | Improve this Doc View Source FilePickerItemClickEventArgs(Object) Initializes a new instance of the FilePickerItemClickEventArgs class with the reference to the clicked item. Declaration public FilePickerItemClickEventArgs(object clickedItem) Parameters Type Name Description System.Object clickedItem The reference to the clicked item. Properties | Improve this Doc View Source CancelRemove Gets or sets a value indicating whether to cancel the removal of the clicked item. Declaration public bool CancelRemove { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ClickedItem Gets a reference to the clicked item. Declaration public object ClickedItem { get; } Property Value Type Description System.Object"
  },
  "api/MADE.UI.Controls.FilePickerItemClickEventHandler.html": {
    "href": "api/MADE.UI.Controls.FilePickerItemClickEventHandler.html",
    "title": "Delegate FilePickerItemClickEventHandler | MADE Uno",
    "keywords": "Delegate FilePickerItemClickEventHandler Defines a delegate for the event which occurs when an item is selected from the FilePicker list. Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.FilePicker.dll Syntax public delegate void FilePickerItemClickEventHandler(object sender, FilePickerItemClickEventArgs args); Parameters Type Name Description System.Object sender The FilePicker . FilePickerItemClickEventArgs args The event argument."
  },
  "api/MADE.UI.Controls.FilePickerSelectionMode.html": {
    "href": "api/MADE.UI.Controls.FilePickerSelectionMode.html",
    "title": "Enum FilePickerSelectionMode | MADE Uno",
    "keywords": "Enum FilePickerSelectionMode Defines constants that specify the selection mode of the IFilePicker . Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.FilePicker.dll Syntax public enum FilePickerSelectionMode : int Fields Name Description Multiple The user can select multiple items. Single A user can select a single item."
  },
  "api/MADE.UI.Controls.html": {
    "href": "api/MADE.UI.Controls.html",
    "title": "Namespace MADE.UI.Controls | MADE Uno",
    "keywords": "Namespace MADE.UI.Controls Classes Chip Defines a control for displaying a value as a chip with remove capabilities. ChipAutomationPeer Defines a framework element automation peer for the Chip control. ChipBox Defines a control for providing multi value input for a text box. ChipBoxAutomationPeer Defines a framework element automation peer for the ChipBox control. ChipBoxChipRemovedEventArgs Defines an event argument for when a Chip is removed from a ChipBox . ChipBoxTextChangedEventArgs Defines an event argument for when the text of the ChipBox has changed. ChipItem Defines a wrapper for an item displayed as a chip. ChipRemovedEventArgs Defines an event argument for when a Chip is removed. ContentControl Defines a UI element for creating custom controls with content in Windows applications. Control Defines a UI element for creating custom controls in Windows applications. DropDownList Defines a selection control that provides a drop-down list box that allows users to select one or multiple items from a list. DropDownListAutomationPeer Defines a framework element automation peer for the DropDownList control. DropDownListSelectedItemsUpdatedEventArgs Defines an event argument for when the DropDownList selected items has updated. FilePicker Defines an input control that provides a user with the ability to select files. FilePickerAutomationPeer Defines a framework element automation peer for the FilePicker control. FilePickerItem Defines a wrapper for an item chosen by the file picker. FilePickerItemClickEventArgs Defines an event argument for when a file picker item is clicked from the list. InputValidator Defines a component which validates an input. InputValidatorAutomationPeer Defines a framework element automation peer for the InputValidator control. RichEditToolbar Defines a customizable and extensible collection of buttons that activate rich text features in an associated . RichEditToolbarAutomationPeer Defines a framework element automation peer for the RichEditToolbar control. RichEditToolbarFontSizeChangedEventArgs Defines an event argument for when a RichEditToolbar font size changed. RichEditToolbarFontStyleChangedEventArgs Defines an event argument for when a RichEditToolbar font style changed. RichEditToolbarListStyleChangedEventArgs Defines an event argument for when a RichEditToolbar list style changed. RichEditToolbarTextColorChangedEventArgs Defines an event argument for when a RichEditToolbar text color changed. RichEditToolbarTextColorOption Defines a text color option for the RichEditToolbar . Interfaces IChip Defines an interface for displaying a value as a chip with remove capabilities. IChipBox Defines an interface for a multi value input text box control. IControl Defines an interface for components of a common application control. IDropDownList Defines an interface for a selection control that provides a drop-down list box that allows users to select one or multiple items from a list. IDropDownList2 Defines an extension interface for a selection control that provides a drop-down list box that allows users to select one or multiple items from a list. IFilePicker Defines an interface for an input control that provides a user with the ability to select files. IInputValidator Defines an interface for a component which validates an input. IRichEditToolbar Defines an interface for a customizable and extensible collection of buttons that activate rich text features in an associated . Enums DropDownListSelectionMode Defines constants that specify the selection mode of the IDropDownList . FilePickerSelectionMode Defines constants that specify the selection mode of the IFilePicker . Delegates ChipBoxChipRemovedEventHandler Defines a delegate for the event which occurs when Chip is removed from a ChipBox . ChipBoxTextChangedEventHandler Defines a delegate for the event which occurs when the text of the ChipBox has changed. ChipRemovedEventHandler Defines a delegate for the event which occurs when Chip is removed. DropDownListSelectedItemsUpdatedEventHandler Defines a delegate for the event which occurs when the DropDownList selected items has updated. FilePickerItemClickEventHandler Defines a delegate for the event which occurs when an item is selected from the FilePicker list. RichEditToolbarFontSizeChangedEventHandler Defines a delegate for the event which occurs when a RichEditToolbar font size changed. RichEditToolbarFontStyleChangedEventHandler Defines a delegate for the event which occurs when a RichEditToolbar font style changed. RichEditToolbarListStyleChangedEventHandler Defines a delegate for the event which occurs when a RichEditToolbar list style changed. RichEditToolbarTextColorChangedEventHandler Defines a delegate for the event which occurs when a RichEditToolbar text color changed."
  },
  "api/MADE.UI.Controls.IChip.html": {
    "href": "api/MADE.UI.Controls.IChip.html",
    "title": "Interface IChip | MADE Uno",
    "keywords": "Interface IChip Defines an interface for displaying a value as a chip with remove capabilities. Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.ChipBox.dll Syntax public interface IChip Properties | Improve this Doc View Source CanRemove Gets or sets a value indicating whether the chip can be removed. Declaration bool CanRemove { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source RemoveCommand Gets or sets the associated with when the user pressed the remove chip button. Declaration ICommand RemoveCommand { get; set; } Property Value Type Description ICommand Events | Improve this Doc View Source Removed Occurs when the user pressed the remove chip button. Declaration event ChipRemovedEventHandler Removed Event Type Type Description ChipRemovedEventHandler"
  },
  "api/MADE.UI.Controls.IChipBox.html": {
    "href": "api/MADE.UI.Controls.IChipBox.html",
    "title": "Interface IChipBox | MADE Uno",
    "keywords": "Interface IChipBox Defines an interface for a multi value input text box control. Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.ChipBox.dll Syntax public interface IChipBox Properties | Improve this Doc View Source AllowDuplicate Gets or sets a value indicating whether to allow duplicate values to be accepted. Declaration bool AllowDuplicate { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source AllowFreeText Gets or sets a value indicating whether to allow free text input. Declaration bool AllowFreeText { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ChipContentTemplate Gets or sets the template associated with the content displayed in the chip. Declaration DataTemplate ChipContentTemplate { get; set; } Property Value Type Description DataTemplate | Improve this Doc View Source ChipItemsViewStyle Gets or sets the style of the items view. Declaration Style ChipItemsViewStyle { get; set; } Property Value Type Description Style | Improve this Doc View Source ChipRemoveCommand Gets or sets the associated with when a chip has been removed. Declaration ICommand ChipRemoveCommand { get; set; } Property Value Type Description ICommand | Improve this Doc View Source Chips Gets or sets an object source used to generate the chip content of the control. Declaration IList<ChipItem> Chips { get; set; } Property Value Type Description IList < ChipItem > | Improve this Doc View Source Header Gets or sets the data used for the header of each control. Declaration object Header { get; set; } Property Value Type Description System.Object | Improve this Doc View Source HeaderTemplate Gets or sets the template used to display the content of the control's header. Declaration DataTemplate HeaderTemplate { get; set; } Property Value Type Description DataTemplate | Improve this Doc View Source IsReadonly Gets or sets a value indicating whether the control is in a read-only state. Declaration bool IsReadonly { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Suggestions Gets or sets the suggestions that are displayed to the user when typing. Declaration object Suggestions { get; set; } Property Value Type Description System.Object | Improve this Doc View Source SuggestionsItemTemplate Gets or sets the template used to display the suggestions that are displayed to the user when typing. Declaration DataTemplate SuggestionsItemTemplate { get; set; } Property Value Type Description DataTemplate | Improve this Doc View Source TextChangeCommand Gets or sets the associated with when the text has changed within the suggestion box. Declaration ICommand TextChangeCommand { get; set; } Property Value Type Description ICommand Events | Improve this Doc View Source ChipRemoved Occurs when a chip has been removed. Declaration event ChipBoxChipRemovedEventHandler ChipRemoved Event Type Type Description ChipBoxChipRemovedEventHandler | Improve this Doc View Source TextChanged Occurs when the text has changed within the suggestion box. Declaration event ChipBoxTextChangedEventHandler TextChanged Event Type Type Description ChipBoxTextChangedEventHandler"
  },
  "api/MADE.UI.Controls.IControl.html": {
    "href": "api/MADE.UI.Controls.IControl.html",
    "title": "Interface IControl | MADE Uno",
    "keywords": "Interface IControl Defines an interface for components of a common application control. Inherited Members IView.ViewLoaded IView.IsVisibleChanged IView.IsEnabled IView.IsVisible Namespace : MADE.UI.Controls Assembly : MADE.UI.dll Syntax public interface IControl : IView Methods | Improve this Doc View Source GetChildView<TView>(String) Retrieves the element from the instantiated view by the given resource identifier. Declaration TView GetChildView<TView>(string resourceName) where TView : class Parameters Type Name Description System.String resourceName The name of the resource to find. Returns Type Description TView Returns the view from the layout, if the view is found. Type Parameters Name Description TView The type of view to retrieve."
  },
  "api/MADE.UI.Controls.IDropDownList.html": {
    "href": "api/MADE.UI.Controls.IDropDownList.html",
    "title": "Interface IDropDownList | MADE Uno",
    "keywords": "Interface IDropDownList Defines an interface for a selection control that provides a drop-down list box that allows users to select one or multiple items from a list. Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.DropDownList.dll Syntax public interface IDropDownList Properties | Improve this Doc View Source Content Gets or sets the content to display on the collapsed drop down. Declaration object Content { get; set; } Property Value Type Description System.Object | Improve this Doc View Source ContentDelimiter Gets or sets the delimiter used to present the content. Declaration string ContentDelimiter { get; set; } Property Value Type Description System.String | Improve this Doc View Source ContentTemplate Gets or sets the DataTemplate used to display the content on the collapsed drop down. Declaration DataTemplate ContentTemplate { get; set; } Property Value Type Description DataTemplate | Improve this Doc View Source ContentTemplateSelector Gets or sets a reference to a custom DataTemplateSelector logic class. The DataTemplateSelector referenced by this property returns a template to apply to the content on the collapsed drop down. Declaration DataTemplateSelector ContentTemplateSelector { get; set; } Property Value Type Description DataTemplateSelector | Improve this Doc View Source Header Gets or sets the content for the control's header. Declaration object Header { get; set; } Property Value Type Description System.Object | Improve this Doc View Source HeaderTemplate Gets or sets the DataTemplate used to display the content of the control's header. Declaration DataTemplate HeaderTemplate { get; set; } Property Value Type Description DataTemplate | Improve this Doc View Source IsDropDownOpen Gets or sets a value indicating whether the drop-down is currently open. Declaration bool IsDropDownOpen { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ItemsPanel Gets or sets the template that defines the panel that controls the layout of items. Declaration ItemsPanelTemplate ItemsPanel { get; set; } Property Value Type Description ItemsPanelTemplate | Improve this Doc View Source ItemsSource Gets or sets an object source used to generate the content of the control. Declaration object ItemsSource { get; set; } Property Value Type Description System.Object | Improve this Doc View Source ItemTemplate Gets or sets the DataTemplate used to display each item. Declaration DataTemplate ItemTemplate { get; set; } Property Value Type Description DataTemplate | Improve this Doc View Source ItemTemplateSelector Gets or sets a reference to a custom DataTemplateSelector logic class. The DataTemplateSelector referenced by this property returns a template to apply to items. Declaration DataTemplateSelector ItemTemplateSelector { get; set; } Property Value Type Description DataTemplateSelector | Improve this Doc View Source MaxDropDownHeight Gets or sets the maximum height for the drop-down. Declaration double MaxDropDownHeight { get; set; } Property Value Type Description System.Double | Improve this Doc View Source SelectedItem Gets or sets the selected item. Declaration object SelectedItem { get; set; } Property Value Type Description System.Object | Improve this Doc View Source SelectedItems Gets the currently selected items. Declaration IList<object> SelectedItems { get; } Property Value Type Description IList < System.Object > | Improve this Doc View Source SelectionMode Gets or sets the selection behavior. Declaration DropDownListSelectionMode SelectionMode { get; set; } Property Value Type Description DropDownListSelectionMode Events | Improve this Doc View Source DropDownClosed Occurs when the drop-down closes. Declaration event EventHandler<object> DropDownClosed Event Type Type Description EventHandler < System.Object > | Improve this Doc View Source DropDownOpened Occurs when the drop-down opens. Declaration event EventHandler<object> DropDownOpened Event Type Type Description EventHandler < System.Object > | Improve this Doc View Source SelectionChanged Occurs when the currently selected item changes. Declaration event SelectionChangedEventHandler SelectionChanged Event Type Type Description SelectionChangedEventHandler"
  },
  "api/MADE.UI.Controls.IDropDownList2.html": {
    "href": "api/MADE.UI.Controls.IDropDownList2.html",
    "title": "Interface IDropDownList2 | MADE Uno",
    "keywords": "Interface IDropDownList2 Defines an extension interface for a selection control that provides a drop-down list box that allows users to select one or multiple items from a list. Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.DropDownList.dll Syntax public interface IDropDownList2 Properties | Improve this Doc View Source DropDownCloseCommand Gets or sets the associated with when the drop-down closes. Declaration ICommand DropDownCloseCommand { get; set; } Property Value Type Description ICommand | Improve this Doc View Source DropDownOpenCommand Gets or sets the associated with when the drop-down opens. Declaration ICommand DropDownOpenCommand { get; set; } Property Value Type Description ICommand | Improve this Doc View Source SelectedItemsUpdateCommand Gets or sets the associated with when the selected items has updated. Declaration ICommand SelectedItemsUpdateCommand { get; set; } Property Value Type Description ICommand | Improve this Doc View Source SelectionChangeCommand Gets or sets the associated with when the currently selected item changes. Declaration ICommand SelectionChangeCommand { get; set; } Property Value Type Description ICommand Events | Improve this Doc View Source SelectedItemsUpdated Occurs when the selected items has updated. Declaration event DropDownListSelectedItemsUpdatedEventHandler SelectedItemsUpdated Event Type Type Description DropDownListSelectedItemsUpdatedEventHandler"
  },
  "api/MADE.UI.Controls.IFilePicker.html": {
    "href": "api/MADE.UI.Controls.IFilePicker.html",
    "title": "Interface IFilePicker | MADE Uno",
    "keywords": "Interface IFilePicker Defines an interface for an input control that provides a user with the ability to select files. Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.FilePicker.dll Syntax public interface IFilePicker Properties | Improve this Doc View Source AppendFiles Gets or sets a value indicating whether to append files with subsequent file choices. Declaration bool AppendFiles { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ChooseFileButtonContent Gets or sets the content of the choose file button. Declaration object ChooseFileButtonContent { get; set; } Property Value Type Description System.Object | Improve this Doc View Source ChooseFileButtonContentTemplate Gets or sets the data template that is used to display the content of the choose file button. Declaration DataTemplate ChooseFileButtonContentTemplate { get; set; } Property Value Type Description DataTemplate | Improve this Doc View Source Files Gets or sets the files chosen. Declaration IList Files { get; set; } Property Value Type Description IList | Improve this Doc View Source FileTypes Gets or sets the file types supported by the input. Declaration IEnumerable FileTypes { get; set; } Property Value Type Description IEnumerable | Improve this Doc View Source Header Gets or sets the data used for the header of each control. Declaration object Header { get; set; } Property Value Type Description System.Object | Improve this Doc View Source HeaderTemplate Gets or sets the template used to display the content of the control's header. Declaration DataTemplate HeaderTemplate { get; set; } Property Value Type Description DataTemplate | Improve this Doc View Source ItemsViewStyle Gets or sets the style of the items view. Declaration Style ItemsViewStyle { get; set; } Property Value Type Description Style | Improve this Doc View Source SelectionMode Gets or sets the file picker selection mode. Declaration FilePickerSelectionMode SelectionMode { get; set; } Property Value Type Description FilePickerSelectionMode Events | Improve this Doc View Source ItemClick Occurs when an item in the list receives an interaction. Declaration event FilePickerItemClickEventHandler ItemClick Event Type Type Description FilePickerItemClickEventHandler"
  },
  "api/MADE.UI.Controls.IInputValidator.html": {
    "href": "api/MADE.UI.Controls.IInputValidator.html",
    "title": "Interface IInputValidator | MADE Uno",
    "keywords": "Interface IInputValidator Defines an interface for a component which validates an input. Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.Validator.dll Syntax public interface IInputValidator Properties | Improve this Doc View Source FeedbackMessageStyle Gets or sets the style associated with the feedback message. Declaration Style FeedbackMessageStyle { get; set; } Property Value Type Description Style | Improve this Doc View Source Input Gets or sets the input to run validation against. Declaration object Input { get; set; } Property Value Type Description System.Object | Improve this Doc View Source Validators Gets or sets the validators to run on the input. Declaration ValidatorCollection Validators { get; set; } Property Value Type Description ValidatorCollection Events | Improve this Doc View Source Validated Occurs when the input value is validated against the collection of validators. Declaration event InputValidatedEventHandler Validated Event Type Type Description InputValidatedEventHandler"
  },
  "api/MADE.UI.Controls.InputValidator.html": {
    "href": "api/MADE.UI.Controls.InputValidator.html",
    "title": "Class InputValidator | MADE Uno",
    "keywords": "Class InputValidator Defines a component which validates an input. Inheritance System.Object ContentControl InputValidator Implements IControl IView IInputValidator Inherited Members ContentControl.ViewLoaded ContentControl.IsVisibleChanged ContentControl.IsVisible ContentControl.GetChildView<TView>(String) Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.Validator.dll Syntax public class InputValidator : ContentControl, IControl, IView, IInputValidator Constructors | Improve this Doc View Source InputValidator() Initializes a new instance of the InputValidator class. Declaration public InputValidator() Fields | Improve this Doc View Source FeedbackMessageStyleProperty Identifies the FeedbackMessageStyle dependency property. Declaration public static readonly DependencyProperty FeedbackMessageStyleProperty Field Value Type Description DependencyProperty | Improve this Doc View Source InputProperty Identifies the Input dependency property. Declaration public static readonly DependencyProperty InputProperty Field Value Type Description DependencyProperty | Improve this Doc View Source ValidatorsProperty Identifies the Validators dependency property. Declaration public static readonly DependencyProperty ValidatorsProperty Field Value Type Description DependencyProperty Properties | Improve this Doc View Source FeedbackMessageStyle Gets or sets the style associated with the feedback message. Declaration public Style FeedbackMessageStyle { get; set; } Property Value Type Description Style | Improve this Doc View Source Input Gets or sets the input to run validation against. Declaration public object Input { get; set; } Property Value Type Description System.Object | Improve this Doc View Source ValidatorFeedbackMessage Gets the view representing the validator feedback message. Declaration public TextBlock ValidatorFeedbackMessage { get; } Property Value Type Description TextBlock | Improve this Doc View Source Validators Gets or sets the validators to run on the input. Declaration public ValidatorCollection Validators { get; set; } Property Value Type Description ValidatorCollection Methods | Improve this Doc View Source OnApplyTemplate() Loads the relevant control template so that its parts can be referenced. Declaration protected override void OnApplyTemplate() | Improve this Doc View Source OnCreateAutomationPeer() Provides the class-specific InputValidatorAutomationPeer implementation for the Microsoft UI Automation infrastructure. Declaration protected override AutomationPeer OnCreateAutomationPeer() Returns Type Description AutomationPeer The class-specific InputValidatorAutomationPeer instance. Events | Improve this Doc View Source Validated Occurs when the input value is validated against the collection of validators. Declaration public event InputValidatedEventHandler Validated Event Type Type Description InputValidatedEventHandler Implements IControl IView IInputValidator"
  },
  "api/MADE.UI.Controls.InputValidatorAutomationPeer.html": {
    "href": "api/MADE.UI.Controls.InputValidatorAutomationPeer.html",
    "title": "Class InputValidatorAutomationPeer | MADE Uno",
    "keywords": "Class InputValidatorAutomationPeer Defines a framework element automation peer for the InputValidator control. Inheritance System.Object InputValidatorAutomationPeer Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.Validator.dll Syntax public class InputValidatorAutomationPeer : FrameworkElementAutomationPeer Constructors | Improve this Doc View Source InputValidatorAutomationPeer(InputValidator) Initializes a new instance of the InputValidatorAutomationPeer class. Declaration public InputValidatorAutomationPeer(InputValidator owner) Parameters Type Name Description InputValidator owner The InputValidator that is associated with this . Methods | Improve this Doc View Source GetAutomationControlTypeCore() Gets the control type for the element that is associated with the UI Automation peer. Declaration protected override AutomationControlType GetAutomationControlTypeCore() Returns Type Description AutomationControlType The control type. | Improve this Doc View Source GetClassNameCore() Provides the type name of the InputValidator when a Microsoft UI Automation client calls GetClassName or an equivalent Microsoft UI Automation client API. Declaration protected override string GetClassNameCore() Returns Type Description System.String The type name of the InputValidator . | Improve this Doc View Source GetNameCore() Provides the name given to the InputValidator when a Microsoft UI Automation client calls GetName or an equivalent Microsoft UI Automation client API. Declaration protected override string GetNameCore() Returns Type Description System.String The name of the InputValidator ."
  },
  "api/MADE.UI.Controls.IRichEditToolbar.html": {
    "href": "api/MADE.UI.Controls.IRichEditToolbar.html",
    "title": "Interface IRichEditToolbar | MADE Uno",
    "keywords": "Interface IRichEditToolbar Defines an interface for a customizable and extensible collection of buttons that activate rich text features in an associated . Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.RichEditToolbar.dll Syntax public interface IRichEditToolbar Properties | Improve this Doc View Source CustomOptions Gets or sets the additional custom options. Declaration IList<ICommandBarElement> CustomOptions { get; set; } Property Value Type Description IList < ICommandBarElement > | Improve this Doc View Source CustomTextColorOptions Gets or sets the additional custom text color options. Declaration IList<RichEditToolbarTextColorOption> CustomTextColorOptions { get; set; } Property Value Type Description IList < RichEditToolbarTextColorOption > | Improve this Doc View Source ShowFontSizeOptions Gets or sets a value indicating whether to show font size options. Declaration bool ShowFontSizeOptions { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ShowListStyleOptions Gets or sets a value indicating whether to show list style options. Declaration bool ShowListStyleOptions { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ShowTextColorOptions Gets or sets a value indicating whether to show text color options. Declaration bool ShowTextColorOptions { get; set; } Property Value Type Description System.Boolean Events | Improve this Doc View Source FontSizeChanged Occurs when the font size has changed. Declaration event RichEditToolbarFontSizeChangedEventHandler FontSizeChanged Event Type Type Description RichEditToolbarFontSizeChangedEventHandler | Improve this Doc View Source FontStyleChanged Occurs when the font style has changed. Declaration event RichEditToolbarFontStyleChangedEventHandler FontStyleChanged Event Type Type Description RichEditToolbarFontStyleChangedEventHandler | Improve this Doc View Source ListStyleChanged Occurs when the list style has changed. Declaration event RichEditToolbarListStyleChangedEventHandler ListStyleChanged Event Type Type Description RichEditToolbarListStyleChangedEventHandler | Improve this Doc View Source TextColorChanged Occurs when the text color has changed. Declaration event RichEditToolbarTextColorChangedEventHandler TextColorChanged Event Type Type Description RichEditToolbarTextColorChangedEventHandler"
  },
  "api/MADE.UI.Controls.RichEditToolbar.html": {
    "href": "api/MADE.UI.Controls.RichEditToolbar.html",
    "title": "Class RichEditToolbar | MADE Uno",
    "keywords": "Class RichEditToolbar Defines a customizable and extensible collection of buttons that activate rich text features in an associated . Inheritance System.Object Control RichEditToolbar Implements IControl IView IRichEditToolbar Inherited Members Control.ViewLoaded Control.IsVisibleChanged Control.IsVisible Control.GetChildView<TView>(String) Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.RichEditToolbar.dll Syntax public class RichEditToolbar : Control, IControl, IView, IRichEditToolbar Constructors | Improve this Doc View Source RichEditToolbar() Initializes a new instance of the RichEditToolbar class. Declaration public RichEditToolbar() Fields | Improve this Doc View Source CustomOptionsProperty Identifies the CustomOptions dependency property. Declaration public static readonly DependencyProperty CustomOptionsProperty Field Value Type Description DependencyProperty | Improve this Doc View Source CustomTextColorOptionsProperty Identifies the CustomTextColorOptions dependency property. Declaration public static readonly DependencyProperty CustomTextColorOptionsProperty Field Value Type Description DependencyProperty | Improve this Doc View Source ShowFontSizeOptionsProperty Identifies the ShowFontSizeOptions dependency property. Declaration public static readonly DependencyProperty ShowFontSizeOptionsProperty Field Value Type Description DependencyProperty | Improve this Doc View Source ShowListStyleOptionsProperty Identifies the ShowListStyleOptions dependency property. Declaration public static readonly DependencyProperty ShowListStyleOptionsProperty Field Value Type Description DependencyProperty | Improve this Doc View Source ShowTextColorOptionsProperty Identifies the ShowTextColorOptions dependency property. Declaration public static readonly DependencyProperty ShowTextColorOptionsProperty Field Value Type Description DependencyProperty Properties | Improve this Doc View Source BoldButton Gets the view representing the button for toggling bold text. Declaration public ToggleButton BoldButton { get; } Property Value Type Description ToggleButton | Improve this Doc View Source BulletListButton Gets the view representing the button for toggling bullet list. Declaration public ToggleButton BulletListButton { get; } Property Value Type Description ToggleButton | Improve this Doc View Source CustomOptions Gets or sets the additional custom options. Declaration public IList<ICommandBarElement> CustomOptions { get; set; } Property Value Type Description IList < ICommandBarElement > | Improve this Doc View Source CustomTextColorOptions Gets or sets the additional custom text color options. Declaration public IList<RichEditToolbarTextColorOption> CustomTextColorOptions { get; set; } Property Value Type Description IList < RichEditToolbarTextColorOption > | Improve this Doc View Source FontSizeDecreaseButton Gets the view representing the button for decreasing the font size. Declaration public Button FontSizeDecreaseButton { get; } Property Value Type Description Button | Improve this Doc View Source FontSizeIncreaseButton Gets the view representing the button for increasing the font size. Declaration public Button FontSizeIncreaseButton { get; } Property Value Type Description Button | Improve this Doc View Source ItalicButton Gets the view representing the button for toggling italic text. Declaration public ToggleButton ItalicButton { get; } Property Value Type Description ToggleButton | Improve this Doc View Source NumberListButton Gets the view representing the button for toggling number list. Declaration public ToggleButton NumberListButton { get; } Property Value Type Description ToggleButton | Improve this Doc View Source ShowFontSizeOptions Gets or sets a value indicating whether to show font size options. Declaration public bool ShowFontSizeOptions { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ShowListStyleOptions Gets or sets a value indicating whether to show list style options. Declaration public bool ShowListStyleOptions { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ShowTextColorOptions Gets or sets a value indicating whether to show text color options. Declaration public bool ShowTextColorOptions { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source TextColorButton Gets the view representing the button for setting text color. Declaration public Button TextColorButton { get; } Property Value Type Description Button | Improve this Doc View Source TextColorOptionsPanel Gets the view representing the panel for displaying text color options. Declaration public Panel TextColorOptionsPanel { get; } Property Value Type Description Panel | Improve this Doc View Source Toolbar Gets the view representing the option button bar. Declaration public CommandBar Toolbar { get; } Property Value Type Description CommandBar | Improve this Doc View Source UnderlineButton Gets the view representing the button for toggling underline text. Declaration public ToggleButton UnderlineButton { get; } Property Value Type Description ToggleButton Methods | Improve this Doc View Source OnApplyTemplate() Loads the relevant control template so that its parts can be referenced. Declaration protected override void OnApplyTemplate() | Improve this Doc View Source OnCreateAutomationPeer() Provides the class-specific RichEditToolbarAutomationPeer implementation for the Microsoft UI Automation infrastructure. Declaration protected override AutomationPeer OnCreateAutomationPeer() Returns Type Description AutomationPeer The class-specific RichEditToolbarAutomationPeer instance. Events | Improve this Doc View Source FontSizeChanged Occurs when the font size has changed. Declaration public event RichEditToolbarFontSizeChangedEventHandler FontSizeChanged Event Type Type Description RichEditToolbarFontSizeChangedEventHandler | Improve this Doc View Source FontStyleChanged Occurs when the font style has changed. Declaration public event RichEditToolbarFontStyleChangedEventHandler FontStyleChanged Event Type Type Description RichEditToolbarFontStyleChangedEventHandler | Improve this Doc View Source ListStyleChanged Occurs when the list style has changed. Declaration public event RichEditToolbarListStyleChangedEventHandler ListStyleChanged Event Type Type Description RichEditToolbarListStyleChangedEventHandler | Improve this Doc View Source TextColorChanged Occurs when the text color has changed. Declaration public event RichEditToolbarTextColorChangedEventHandler TextColorChanged Event Type Type Description RichEditToolbarTextColorChangedEventHandler Implements IControl IView IRichEditToolbar"
  },
  "api/MADE.UI.Controls.RichEditToolbarAutomationPeer.html": {
    "href": "api/MADE.UI.Controls.RichEditToolbarAutomationPeer.html",
    "title": "Class RichEditToolbarAutomationPeer | MADE Uno",
    "keywords": "Class RichEditToolbarAutomationPeer Defines a framework element automation peer for the RichEditToolbar control. Inheritance System.Object RichEditToolbarAutomationPeer Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.RichEditToolbar.dll Syntax public class RichEditToolbarAutomationPeer : FrameworkElementAutomationPeer Constructors | Improve this Doc View Source RichEditToolbarAutomationPeer(RichEditToolbar) Initializes a new instance of the RichEditToolbarAutomationPeer class. Declaration public RichEditToolbarAutomationPeer(RichEditToolbar owner) Parameters Type Name Description RichEditToolbar owner The RichEditToolbar that is associated with this . Methods | Improve this Doc View Source GetAutomationControlTypeCore() Gets the control type for the element that is associated with the UI Automation peer. Declaration protected override AutomationControlType GetAutomationControlTypeCore() Returns Type Description AutomationControlType The control type. | Improve this Doc View Source GetClassNameCore() Provides the type name of the RichEditToolbar when a Microsoft UI Automation client calls GetClassName or an equivalent Microsoft UI Automation client API. Declaration protected override string GetClassNameCore() Returns Type Description System.String The type name of the RichEditToolbar . | Improve this Doc View Source GetNameCore() Provides the name given to the RichEditToolbar when a Microsoft UI Automation client calls GetName or an equivalent Microsoft UI Automation client API. Declaration protected override string GetNameCore() Returns Type Description System.String The name of the RichEditToolbar ."
  },
  "api/MADE.UI.Controls.RichEditToolbarFontSizeChangedEventArgs.html": {
    "href": "api/MADE.UI.Controls.RichEditToolbarFontSizeChangedEventArgs.html",
    "title": "Class RichEditToolbarFontSizeChangedEventArgs | MADE Uno",
    "keywords": "Class RichEditToolbarFontSizeChangedEventArgs Defines an event argument for when a RichEditToolbar font size changed. Inheritance System.Object RichEditToolbarFontSizeChangedEventArgs Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.RichEditToolbar.dll Syntax public class RichEditToolbarFontSizeChangedEventArgs : RoutedEventArgs Constructors | Improve this Doc View Source RichEditToolbarFontSizeChangedEventArgs(Single) Initializes a new instance of the RichEditToolbarFontSizeChangedEventArgs class. Declaration public RichEditToolbarFontSizeChangedEventArgs(float fontSize) Parameters Type Name Description System.Single fontSize The changed font size. Properties | Improve this Doc View Source FontSize Gets changed font size. Declaration public float FontSize { get; } Property Value Type Description System.Single"
  },
  "api/MADE.UI.Controls.RichEditToolbarFontSizeChangedEventHandler.html": {
    "href": "api/MADE.UI.Controls.RichEditToolbarFontSizeChangedEventHandler.html",
    "title": "Delegate RichEditToolbarFontSizeChangedEventHandler | MADE Uno",
    "keywords": "Delegate RichEditToolbarFontSizeChangedEventHandler Defines a delegate for the event which occurs when a RichEditToolbar font size changed. Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.RichEditToolbar.dll Syntax public delegate void RichEditToolbarFontSizeChangedEventHandler(object sender, RichEditToolbarFontSizeChangedEventArgs args); Parameters Type Name Description System.Object sender The RichEditToolbar . RichEditToolbarFontSizeChangedEventArgs args The event argument."
  },
  "api/MADE.UI.Controls.RichEditToolbarFontStyleChangedEventArgs.html": {
    "href": "api/MADE.UI.Controls.RichEditToolbarFontStyleChangedEventArgs.html",
    "title": "Class RichEditToolbarFontStyleChangedEventArgs | MADE Uno",
    "keywords": "Class RichEditToolbarFontStyleChangedEventArgs Defines an event argument for when a RichEditToolbar font style changed. Inheritance System.Object RichEditToolbarFontStyleChangedEventArgs Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.RichEditToolbar.dll Syntax public class RichEditToolbarFontStyleChangedEventArgs : RoutedEventArgs Constructors | Improve this Doc View Source RichEditToolbarFontStyleChangedEventArgs(Boolean, Boolean, Boolean) Initializes a new instance of the RichEditToolbarFontStyleChangedEventArgs class. Declaration public RichEditToolbarFontStyleChangedEventArgs(bool bold, bool italic, bool underline) Parameters Type Name Description System.Boolean bold A value indicating whether bold is enabled. System.Boolean italic A value indicating whether italic is enabled. System.Boolean underline A value indicating whether underline is enabled. Properties | Improve this Doc View Source Bold Gets a value indicating whether bold is enabled. Declaration public bool Bold { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Italic Gets a value indicating whether italic is enabled. Declaration public bool Italic { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Underline Gets a value indicating whether underline is enabled. Declaration public bool Underline { get; } Property Value Type Description System.Boolean"
  },
  "api/MADE.UI.Controls.RichEditToolbarFontStyleChangedEventHandler.html": {
    "href": "api/MADE.UI.Controls.RichEditToolbarFontStyleChangedEventHandler.html",
    "title": "Delegate RichEditToolbarFontStyleChangedEventHandler | MADE Uno",
    "keywords": "Delegate RichEditToolbarFontStyleChangedEventHandler Defines a delegate for the event which occurs when a RichEditToolbar font style changed. Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.RichEditToolbar.dll Syntax public delegate void RichEditToolbarFontStyleChangedEventHandler(object sender, RichEditToolbarFontStyleChangedEventArgs args); Parameters Type Name Description System.Object sender The RichEditToolbar . RichEditToolbarFontStyleChangedEventArgs args The event argument."
  },
  "api/MADE.UI.Controls.RichEditToolbarListStyleChangedEventArgs.html": {
    "href": "api/MADE.UI.Controls.RichEditToolbarListStyleChangedEventArgs.html",
    "title": "Class RichEditToolbarListStyleChangedEventArgs | MADE Uno",
    "keywords": "Class RichEditToolbarListStyleChangedEventArgs Defines an event argument for when a RichEditToolbar list style changed. Inheritance System.Object RichEditToolbarListStyleChangedEventArgs Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.RichEditToolbar.dll Syntax public class RichEditToolbarListStyleChangedEventArgs : RoutedEventArgs Constructors | Improve this Doc View Source RichEditToolbarListStyleChangedEventArgs(Boolean, Boolean) Initializes a new instance of the RichEditToolbarListStyleChangedEventArgs class with the reference to the clicked item. Declaration public RichEditToolbarListStyleChangedEventArgs(bool bulletedList, bool numberedList) Parameters Type Name Description System.Boolean bulletedList A value indicating whether bulleted list is enabled. System.Boolean numberedList A value indicating whether numbered list is enabled. Properties | Improve this Doc View Source BulletedList Gets a value indicating whether bulleted list is enabled. Declaration public bool BulletedList { get; } Property Value Type Description System.Boolean | Improve this Doc View Source NumberedList Gets a value indicating whether numbered list is enabled. Declaration public bool NumberedList { get; } Property Value Type Description System.Boolean"
  },
  "api/MADE.UI.Controls.RichEditToolbarListStyleChangedEventHandler.html": {
    "href": "api/MADE.UI.Controls.RichEditToolbarListStyleChangedEventHandler.html",
    "title": "Delegate RichEditToolbarListStyleChangedEventHandler | MADE Uno",
    "keywords": "Delegate RichEditToolbarListStyleChangedEventHandler Defines a delegate for the event which occurs when a RichEditToolbar list style changed. Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.RichEditToolbar.dll Syntax public delegate void RichEditToolbarListStyleChangedEventHandler(object sender, RichEditToolbarListStyleChangedEventArgs args); Parameters Type Name Description System.Object sender The RichEditToolbar . RichEditToolbarListStyleChangedEventArgs args The event argument."
  },
  "api/MADE.UI.Controls.RichEditToolbarTextColorChangedEventArgs.html": {
    "href": "api/MADE.UI.Controls.RichEditToolbarTextColorChangedEventArgs.html",
    "title": "Class RichEditToolbarTextColorChangedEventArgs | MADE Uno",
    "keywords": "Class RichEditToolbarTextColorChangedEventArgs Defines an event argument for when a RichEditToolbar text color changed. Inheritance System.Object RichEditToolbarTextColorChangedEventArgs Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.RichEditToolbar.dll Syntax public class RichEditToolbarTextColorChangedEventArgs : RoutedEventArgs Constructors | Improve this Doc View Source RichEditToolbarTextColorChangedEventArgs(String) Initializes a new instance of the RichEditToolbarTextColorChangedEventArgs class. Declaration public RichEditToolbarTextColorChangedEventArgs(string color) Parameters Type Name Description System.String color The color as a hex value. Properties | Improve this Doc View Source Color Gets the color as a hex value. Declaration public string Color { get; } Property Value Type Description System.String"
  },
  "api/MADE.UI.Controls.RichEditToolbarTextColorChangedEventHandler.html": {
    "href": "api/MADE.UI.Controls.RichEditToolbarTextColorChangedEventHandler.html",
    "title": "Delegate RichEditToolbarTextColorChangedEventHandler | MADE Uno",
    "keywords": "Delegate RichEditToolbarTextColorChangedEventHandler Defines a delegate for the event which occurs when a RichEditToolbar text color changed. Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.RichEditToolbar.dll Syntax public delegate void RichEditToolbarTextColorChangedEventHandler(object sender, RichEditToolbarTextColorChangedEventArgs args); Parameters Type Name Description System.Object sender The RichEditToolbar . RichEditToolbarTextColorChangedEventArgs args The event argument."
  },
  "api/MADE.UI.Controls.RichEditToolbarTextColorOption.html": {
    "href": "api/MADE.UI.Controls.RichEditToolbarTextColorOption.html",
    "title": "Class RichEditToolbarTextColorOption | MADE Uno",
    "keywords": "Class RichEditToolbarTextColorOption Defines a text color option for the RichEditToolbar . Inheritance System.Object RichEditToolbarTextColorOption Namespace : MADE.UI.Controls Assembly : MADE.UI.Controls.RichEditToolbar.dll Syntax public class RichEditToolbarTextColorOption : object Properties | Improve this Doc View Source Color Gets or sets the value representing the color as a hex value. Declaration public string Color { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name Gets or sets the name of the color. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/MADE.UI.Data.Converters.BooleanToStringValueConverter.html": {
    "href": "api/MADE.UI.Data.Converters.BooleanToStringValueConverter.html",
    "title": "Class BooleanToStringValueConverter | MADE Uno",
    "keywords": "Class BooleanToStringValueConverter Defines a XAML value converter for converting from to . Inheritance System.Object BooleanToStringValueConverter Implements IValueConverter IValueConverter < System.Boolean , System.String > Namespace : MADE.UI.Data.Converters Assembly : MADE.UI.Data.Converters.dll Syntax public class BooleanToStringValueConverter : DependencyObject Fields | Improve this Doc View Source FalseValueProperty Defines the dependency property for FalseValue . Declaration public static readonly DependencyProperty FalseValueProperty Field Value Type Description DependencyProperty | Improve this Doc View Source TrueValueProperty Defines the dependency property for TrueValue . Declaration public static readonly DependencyProperty TrueValueProperty Field Value Type Description DependencyProperty Properties | Improve this Doc View Source FalseValue Gets or sets the negative/false value. Declaration public string FalseValue { get; set; } Property Value Type Description System.String | Improve this Doc View Source TrueValue Gets or sets the positive/true value. Declaration public string TrueValue { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Convert(Boolean, Object) Converts the value to the type. Declaration public string Convert(bool value, object parameter = null) Parameters Type Name Description System.Boolean value The value to convert. System.Object parameter The optional parameter used to help with conversion. Returns Type Description System.String The converted object. | Improve this Doc View Source Convert(Object, Type, Object, String) Converts the value to the type. Declaration public object Convert(object value, Type targetType, object parameter, string language) Parameters Type Name Description System.Object value The value to convert. Type targetType The target type (unused). System.Object parameter The optional parameter used to help with conversion (unused). System.String language The display language for the conversion (unused). Returns Type Description System.Object The converted object. | Improve this Doc View Source ConvertBack(Object, Type, Object, String) Converts the value back to the type. Declaration public object ConvertBack(object value, Type targetType, object parameter, string language) Parameters Type Name Description System.Object value The value to convert. Type targetType The target type (unused). System.Object parameter The optional parameter used to help with conversion (unused). System.String language The display language for the conversion (unused). Returns Type Description System.Object The converted object. | Improve this Doc View Source ConvertBack(String, Object) Converts the value back to the type. Declaration public bool ConvertBack(string value, object parameter = null) Parameters Type Name Description System.String value The value to convert. System.Object parameter The optional parameter used to help with conversion. Returns Type Description System.Boolean The converted object. Implements IValueConverter IValueConverter<, >"
  },
  "api/MADE.UI.Data.Converters.ByteArrayToImageSourceValueConverter.html": {
    "href": "api/MADE.UI.Data.Converters.ByteArrayToImageSourceValueConverter.html",
    "title": "Class ByteArrayToImageSourceValueConverter | MADE Uno",
    "keywords": "Class ByteArrayToImageSourceValueConverter Defines a XAML value converter for converting from a array to . Inheritance System.Object ByteArrayToImageSourceValueConverter Implements IValueConverter < System.Byte [], BitmapSource > Namespace : MADE.UI.Data.Converters Assembly : MADE.UI.Data.Converters.dll Syntax public class ByteArrayToImageSourceValueConverter : IValueConverter Methods | Improve this Doc View Source Convert(Byte[], Object) Converts the value to the type. Declaration public BitmapSource Convert(byte[] value, object parameter = null) Parameters Type Name Description System.Byte [] value The value to convert. System.Object parameter The optional parameter used to help with conversion. Returns Type Description BitmapSource The converted object. | Improve this Doc View Source Convert(Object, Type, Object, String) Converts the value to the type. Declaration public object Convert(object value, Type targetType, object parameter, string language) Parameters Type Name Description System.Object value The value to convert. Type targetType The target type (unused). System.Object parameter The optional parameter used to help with conversion (unused). System.String language The display language for the conversion (unused). Returns Type Description System.Object The converted object. | Improve this Doc View Source ConvertBack(BitmapSource, Object) Converting back from to a array is not supported. Declaration public byte[] ConvertBack(BitmapSource value, object parameter = null) Parameters Type Name Description BitmapSource value System.Object parameter Returns Type Description System.Byte [] The converted object. | Improve this Doc View Source ConvertBack(Object, Type, Object, String) Converting back from to a array is not supported. Declaration public object ConvertBack(object value, Type targetType, object parameter, string language) Parameters Type Name Description System.Object value The value to convert (unused). Type targetType The target type (unused). System.Object parameter The optional parameter used to help with conversion (unused). System.String language The display language for the conversion (unused). Returns Type Description System.Object An unset value. Implements IValueConverter<, >"
  },
  "api/MADE.UI.Data.Converters.DateTimeToStringValueConverter.html": {
    "href": "api/MADE.UI.Data.Converters.DateTimeToStringValueConverter.html",
    "title": "Class DateTimeToStringValueConverter | MADE Uno",
    "keywords": "Class DateTimeToStringValueConverter Defines a XAML value converter for converting from to with an optional format string. Inheritance System.Object DateTimeToStringValueConverter Implements IValueConverter < DateTime , System.String > Namespace : MADE.UI.Data.Converters Assembly : MADE.UI.Data.Converters.dll Syntax public class DateTimeToStringValueConverter : IValueConverter Methods | Improve this Doc View Source Convert(DateTime, Object) Converts the value to the type. Declaration public string Convert(DateTime value, object parameter = null) Parameters Type Name Description DateTime value The value to convert. System.Object parameter The optional parameter used to help with conversion. Returns Type Description System.String The converted object. | Improve this Doc View Source Convert(Object, Type, Object, String) Converts the value to the type. Declaration public object Convert(object value, Type targetType, object parameter, string language) Parameters Type Name Description System.Object value The value to convert. Type targetType The target type (unused). System.Object parameter The optional string format parameter used to help with conversion. System.String language The display language for the conversion (unused). Returns Type Description System.Object The converted object. | Improve this Doc View Source ConvertBack(Object, Type, Object, String) Converts the value back to the type. Declaration public object ConvertBack(object value, Type targetType, object parameter, string language) Parameters Type Name Description System.Object value The value to convert. Type targetType The target type (unused). System.Object parameter The optional parameter used to help with conversion (unused). System.String language The display language for the conversion (unused). Returns Type Description System.Object The converted object. | Improve this Doc View Source ConvertBack(String, Object) Converts the value back to the type. Declaration public DateTime ConvertBack(string value, object parameter = null) Parameters Type Name Description System.String value The value to convert. System.Object parameter The optional parameter used to help with conversion. Returns Type Description DateTime The converted object. Implements IValueConverter<, >"
  },
  "api/MADE.UI.Data.Converters.EmptyStringFormatValueConverter.html": {
    "href": "api/MADE.UI.Data.Converters.EmptyStringFormatValueConverter.html",
    "title": "Class EmptyStringFormatValueConverter | MADE Uno",
    "keywords": "Class EmptyStringFormatValueConverter Defines a XAML value converter for converting an empty to a set value, or returning the non-empty value string. Inheritance System.Object EmptyStringFormatValueConverter Implements IValueConverter IValueConverter < System.String , System.String > Namespace : MADE.UI.Data.Converters Assembly : MADE.UI.Data.Converters.dll Syntax public class EmptyStringFormatValueConverter : DependencyObject Fields | Improve this Doc View Source EmptyStringValueProperty Defines the dependency property for EmptyStringValue . Declaration public static readonly DependencyProperty EmptyStringValueProperty Field Value Type Description DependencyProperty Properties | Improve this Doc View Source EmptyStringValue Gets or sets the value to show when the value is empty. Declaration public string EmptyStringValue { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Convert(Object, Type, Object, String) Converts the value to the EmptyStringValue if empty; otherwise, the value is returned. Declaration public object Convert(object value, Type targetType, object parameter, string language) Parameters Type Name Description System.Object value The value to convert. Type targetType The target type (unused). System.Object parameter The optional parameter used to help with conversion (unused). System.String language The display language for the conversion (unused). Returns Type Description System.Object The converted object. | Improve this Doc View Source Convert(String, Object) Converts the value to the EmptyStringValue if empty; otherwise, the value is returned. Declaration public string Convert(string value, object parameter = null) Parameters Type Name Description System.String value The value to convert. System.Object parameter The optional parameter used to help with conversion. Returns Type Description System.String The converted object. | Improve this Doc View Source ConvertBack(Object, Type, Object, String) Converts the value back to the value. Declaration public object ConvertBack(object value, Type targetType, object parameter, string language) Parameters Type Name Description System.Object value The value to convert. Type targetType The target type (unused). System.Object parameter The optional parameter used to help with conversion (unused). System.String language The display language for the conversion (unused). Returns Type Description System.Object The object. | Improve this Doc View Source ConvertBack(String, Object) Converts the value back to the value. Declaration public string ConvertBack(string value, object parameter = null) Parameters Type Name Description System.String value The value to convert. System.Object parameter The optional parameter used to help with conversion. Returns Type Description System.String The converted object. Implements IValueConverter IValueConverter<, >"
  },
  "api/MADE.UI.Data.Converters.Extensions.ByteArrayExtensions.html": {
    "href": "api/MADE.UI.Data.Converters.Extensions.ByteArrayExtensions.html",
    "title": "Class ByteArrayExtensions | MADE Uno",
    "keywords": "Class ByteArrayExtensions Defines a collection of extensions for array instances. Inheritance System.Object ByteArrayExtensions Namespace : MADE.UI.Data.Converters.Extensions Assembly : MADE.UI.Data.Converters.dll Syntax public static class ByteArrayExtensions : object Methods | Improve this Doc View Source ToBitmapSource(Byte[]) Converts an array of bytes representing an image into a . Declaration public static BitmapSource ToBitmapSource(this byte[] imageBytes) Parameters Type Name Description System.Byte [] imageBytes The image bytes. Returns Type Description BitmapSource Returns a of the specified bytes."
  },
  "api/MADE.UI.Data.Converters.Extensions.html": {
    "href": "api/MADE.UI.Data.Converters.Extensions.html",
    "title": "Namespace MADE.UI.Data.Converters.Extensions | MADE Uno",
    "keywords": "Namespace MADE.UI.Data.Converters.Extensions Classes ByteArrayExtensions Defines a collection of extensions for array instances."
  },
  "api/MADE.UI.Data.Converters.html": {
    "href": "api/MADE.UI.Data.Converters.html",
    "title": "Namespace MADE.UI.Data.Converters | MADE Uno",
    "keywords": "Namespace MADE.UI.Data.Converters Classes BooleanToStringValueConverter Defines a XAML value converter for converting from to . ByteArrayToImageSourceValueConverter Defines a XAML value converter for converting from a array to . DateTimeToStringValueConverter Defines a XAML value converter for converting from to with an optional format string. EmptyStringFormatValueConverter Defines a XAML value converter for converting an empty to a set value, or returning the non-empty value string."
  },
  "api/MADE.UI.Extensions.html": {
    "href": "api/MADE.UI.Extensions.html",
    "title": "Namespace MADE.UI.Extensions | MADE Uno",
    "keywords": "Namespace MADE.UI.Extensions Classes ListViewBaseExtensions Defines an extension to the control for binding a command to the item click event. ViewExtensions Defines a collection of extensions for handling Views in Windows applications."
  },
  "api/MADE.UI.Extensions.ListViewBaseExtensions.html": {
    "href": "api/MADE.UI.Extensions.ListViewBaseExtensions.html",
    "title": "Class ListViewBaseExtensions | MADE Uno",
    "keywords": "Class ListViewBaseExtensions Defines an extension to the control for binding a command to the item click event. Inheritance System.Object ListViewBaseExtensions Namespace : MADE.UI.Extensions Assembly : MADE.UI.dll Syntax public static class ListViewBaseExtensions : object Fields | Improve this Doc View Source ItemClickCommandProperty Defines the dependency property for the item click command. Declaration public static readonly DependencyProperty ItemClickCommandProperty Field Value Type Description DependencyProperty Methods | Improve this Doc View Source GetItemClickCommand(DependencyObject) Gets the item click command for the specified . Declaration public static ICommand GetItemClickCommand(DependencyObject obj) Parameters Type Name Description DependencyObject obj The to get the command from. Returns Type Description ICommand Returns the . | Improve this Doc View Source SetItemClickCommand(DependencyObject, ICommand) Sets the item click command for the specified . Declaration public static void SetItemClickCommand(DependencyObject obj, ICommand command) Parameters Type Name Description DependencyObject obj The to set the command to. ICommand command The to set."
  },
  "api/MADE.UI.Extensions.ViewExtensions.html": {
    "href": "api/MADE.UI.Extensions.ViewExtensions.html",
    "title": "Class ViewExtensions | MADE Uno",
    "keywords": "Class ViewExtensions Defines a collection of extensions for handling Views in Windows applications. Inheritance System.Object ViewExtensions Namespace : MADE.UI.Extensions Assembly : MADE.UI.dll Syntax public static class ViewExtensions : object Methods | Improve this Doc View Source SetVisible(UIElement, Boolean) Sets the visibility of the given control by the given visible boolean value. Declaration public static void SetVisible(this UIElement view, bool isVisible) Parameters Type Name Description UIElement view The control to update visibility. System.Boolean isVisible A value indicating whether the control is visible. | Improve this Doc View Source SetVisible(UIElement, Boolean, Boolean) Sets the visibility of the given control by the given visible boolean value. If the control can contain child control, these will also be updated if the given parameter is set to true. Declaration public static void SetVisible(this UIElement view, bool isVisible, bool updateChildViews) Parameters Type Name Description UIElement view The control to update visibility. System.Boolean isVisible A value indicating whether the control is visible. System.Boolean updateChildViews A value indicating whether to update the control's child visibility states."
  },
  "api/MADE.UI.html": {
    "href": "api/MADE.UI.html",
    "title": "Namespace MADE.UI | MADE Uno",
    "keywords": "Namespace MADE.UI Classes ViewLoadedEventArgs Defines an event argument for a view having loaded. Interfaces IView Defines an interface for a common application user interface. Delegates ViewLoadedEventHandler Defines a delegate for an event handler of view's having loaded."
  },
  "api/MADE.UI.IView.html": {
    "href": "api/MADE.UI.IView.html",
    "title": "Interface IView | MADE Uno",
    "keywords": "Interface IView Defines an interface for a common application user interface. Namespace : MADE.UI Assembly : MADE.UI.dll Syntax public interface IView Properties | Improve this Doc View Source IsEnabled Gets or sets a value indicating whether the view is enabled and can be interacted with. Declaration bool IsEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsVisible Gets or sets a value indicating whether the view is visible in the UI. Declaration bool IsVisible { get; set; } Property Value Type Description System.Boolean Events | Improve this Doc View Source IsVisibleChanged Occurs when the IsVisible state has changed. Declaration event EventHandler<bool> IsVisibleChanged Event Type Type Description EventHandler < System.Boolean > | Improve this Doc View Source ViewLoaded Occurs when the view has loaded. Declaration event ViewLoadedEventHandler ViewLoaded Event Type Type Description ViewLoadedEventHandler"
  },
  "api/MADE.UI.Styling.Colors.DarkenColorBrushConverter.html": {
    "href": "api/MADE.UI.Styling.Colors.DarkenColorBrushConverter.html",
    "title": "Class DarkenColorBrushConverter | MADE Uno",
    "keywords": "Class DarkenColorBrushConverter Defines a XAML value converter to darken the color of a specified . Inheritance System.Object DarkenColorBrushConverter Namespace : MADE.UI.Styling.Colors Assembly : MADE.UI.Styling.dll Syntax public class DarkenColorBrushConverter : IValueConverter Methods | Improve this Doc View Source Convert(Object, Type, Object, String) Converts the value to a darker using the parameter darken value. Declaration public object Convert(object value, Type targetType, object parameter, string language) Parameters Type Name Description System.Object value The value to convert. Type targetType The target type (unused). System.Object parameter The optional parameter used to define the amount to darken by. System.String language The display language for the conversion (unused). Returns Type Description System.Object The darkened object. | Improve this Doc View Source ConvertBack(Object, Type, Object, String) Convert back is not supported by the DarkenColorBrushConverter . Declaration public object ConvertBack(object value, Type targetType, object parameter, string language) Parameters Type Name Description System.Object value Type targetType System.Object parameter System.String language Returns Type Description System.Object"
  },
  "api/MADE.UI.Styling.Colors.html": {
    "href": "api/MADE.UI.Styling.Colors.html",
    "title": "Namespace MADE.UI.Styling.Colors | MADE Uno",
    "keywords": "Namespace MADE.UI.Styling.Colors Classes DarkenColorBrushConverter Defines a XAML value converter to darken the color of a specified . LightenColorBrushConverter Defines a XAML value converter to lighten the color of a specified . SystemColorExtensions Defines a collection of extensions for System colors. WindowsColorExtensions Defines a collection of extensions for Windows colors."
  },
  "api/MADE.UI.Styling.Colors.LightenColorBrushConverter.html": {
    "href": "api/MADE.UI.Styling.Colors.LightenColorBrushConverter.html",
    "title": "Class LightenColorBrushConverter | MADE Uno",
    "keywords": "Class LightenColorBrushConverter Defines a XAML value converter to lighten the color of a specified . Inheritance System.Object LightenColorBrushConverter Namespace : MADE.UI.Styling.Colors Assembly : MADE.UI.Styling.dll Syntax public class LightenColorBrushConverter : IValueConverter Methods | Improve this Doc View Source Convert(Object, Type, Object, String) Converts the value to a lighter using the parameter lighten value. Declaration public object Convert(object value, Type targetType, object parameter, string language) Parameters Type Name Description System.Object value The value to convert. Type targetType The target type (unused). System.Object parameter The optional parameter used to define the amount to lighten by. System.String language The display language for the conversion (unused). Returns Type Description System.Object The lightened object. | Improve this Doc View Source ConvertBack(Object, Type, Object, String) Convert back is not supported by the LightenColorBrushConverter . Declaration public object ConvertBack(object value, Type targetType, object parameter, string language) Parameters Type Name Description System.Object value Type targetType System.Object parameter System.String language Returns Type Description System.Object"
  },
  "api/MADE.UI.Styling.Colors.SystemColorExtensions.html": {
    "href": "api/MADE.UI.Styling.Colors.SystemColorExtensions.html",
    "title": "Class SystemColorExtensions | MADE Uno",
    "keywords": "Class SystemColorExtensions Defines a collection of extensions for System colors. Inheritance System.Object SystemColorExtensions Namespace : MADE.UI.Styling.Colors Assembly : MADE.UI.Styling.dll Syntax public static class SystemColorExtensions : object Methods | Improve this Doc View Source Darken(System.Drawing.Color, Single) Darkens a color by a given amount. Declaration public static System.Drawing.Color Darken(this System.Drawing.Color color, float amount) Parameters Type Name Description System.Drawing.Color color The System.Drawing.Color to darken. System.Single amount The amount to darken by. Returns Type Description System.Drawing.Color The darkened color as a System.Drawing.Color . | Improve this Doc View Source IsInRange(System.Drawing.Color, System.Drawing.Color, Single) Checks whether the specified color is within the range of another by the specified amount. Declaration public static bool IsInRange(this System.Drawing.Color color, System.Drawing.Color comparer, float amount) Parameters Type Name Description System.Drawing.Color color The color to compare. System.Drawing.Color comparer The color to compare with. System.Single amount The range either side of the comparer . Returns Type Description System.Boolean True if is in range; otherwise, false. | Improve this Doc View Source IsInRange(System.Drawing.Color, System.Drawing.Color, Single, Boolean) Checks whether the specified color is within the range of another by the specified amount. Declaration public static bool IsInRange(this System.Drawing.Color color, System.Drawing.Color comparer, float amount, bool ignoreTransparency) Parameters Type Name Description System.Drawing.Color color The color to compare. System.Drawing.Color comparer The color to compare with. System.Single amount The range either side of the comparer . System.Boolean ignoreTransparency Indicates whether to ignore transparency. Returns Type Description System.Boolean True if is in range; otherwise, false. | Improve this Doc View Source Lighten(System.Drawing.Color, Single) Lightens a color by a given amount. Declaration public static System.Drawing.Color Lighten(this System.Drawing.Color color, float amount) Parameters Type Name Description System.Drawing.Color color The System.Drawing.Color to lighten. System.Single amount The amount to lighten by. Returns Type Description System.Drawing.Color The lightened color as a System.Drawing.Color . | Improve this Doc View Source ToHexString(System.Drawing.Color) Gets the hex representation of the specified System.Drawing.Color . Declaration public static string ToHexString(this System.Drawing.Color color) Parameters Type Name Description System.Drawing.Color color The System.Drawing.Color to get the hex value of. Returns Type Description System.String The hex value as a System.String . | Improve this Doc View Source ToSolidColorBrush(System.Drawing.Color) Converts the specified System.Drawing.Color to a Windows.UI.Xaml.Media.SolidColorBrush . Declaration public static SolidColorBrush ToSolidColorBrush(this System.Drawing.Color color) Parameters Type Name Description System.Drawing.Color color The System.Drawing.Color to convert. Returns Type Description SolidColorBrush A Windows.UI.Xaml.Media.SolidColorBrush representation of the specified color. | Improve this Doc View Source ToSystemColor(String) Converts an ARGB or RGB hex value to a System.Drawing.Color . Declaration public static System.Drawing.Color ToSystemColor(this string hexValue) Parameters Type Name Description System.String hexValue The ARGB or RGB hex value represented as a string. Returns Type Description System.Drawing.Color The Color representation of the ARGB hex string value. | Improve this Doc View Source ToWindowsColor(System.Drawing.Color) Converts a System.Drawing.Color to a Windows.UI.Color . Declaration public static Windows.UI.Color ToWindowsColor(this System.Drawing.Color color) Parameters Type Name Description System.Drawing.Color color The System.Drawing.Color to convert. Returns Type Description Windows.UI.Color The Windows.UI.Color ."
  },
  "api/MADE.UI.Styling.Colors.WindowsColorExtensions.html": {
    "href": "api/MADE.UI.Styling.Colors.WindowsColorExtensions.html",
    "title": "Class WindowsColorExtensions | MADE Uno",
    "keywords": "Class WindowsColorExtensions Defines a collection of extensions for Windows colors. Inheritance System.Object WindowsColorExtensions Namespace : MADE.UI.Styling.Colors Assembly : MADE.UI.Styling.dll Syntax public static class WindowsColorExtensions : object Methods | Improve this Doc View Source Darken(Windows.UI.Color, Single) Darkens a color by a given amount. Declaration public static Windows.UI.Color Darken(this Windows.UI.Color color, float amount) Parameters Type Name Description Windows.UI.Color color The Windows.UI.Color to darken. System.Single amount The amount to darken by. Returns Type Description Windows.UI.Color The darkened color as a Windows.UI.Color . | Improve this Doc View Source IsInRange(Windows.UI.Color, Windows.UI.Color, Single) Checks whether the specified color is within the range of another by the specified amount. Declaration public static bool IsInRange(this Windows.UI.Color color, Windows.UI.Color comparer, float amount) Parameters Type Name Description Windows.UI.Color color The color to compare. Windows.UI.Color comparer The color to compare with. System.Single amount The range either side of the comparer . Returns Type Description System.Boolean True if is in range; otherwise, false. | Improve this Doc View Source IsInRange(Windows.UI.Color, Windows.UI.Color, Single, Boolean) Checks whether the specified color is within the range of another by the specified amount. Declaration public static bool IsInRange(this Windows.UI.Color color, Windows.UI.Color comparer, float amount, bool ignoreTransparency) Parameters Type Name Description Windows.UI.Color color The color to compare. Windows.UI.Color comparer The color to compare with. System.Single amount The range either side of the comparer . System.Boolean ignoreTransparency Indicates whether to ignore transparency. Returns Type Description System.Boolean True if is in range; otherwise, false. | Improve this Doc View Source Lighten(Windows.UI.Color, Single) Lightens a color by a given amount. Declaration public static Windows.UI.Color Lighten(this Windows.UI.Color color, float amount) Parameters Type Name Description Windows.UI.Color color The Windows.UI.Color to lighten. System.Single amount The amount to lighten by. Returns Type Description Windows.UI.Color The lightened color as a Windows.UI.Color . | Improve this Doc View Source ToHexString(Windows.UI.Color) Gets the hex representation of the specified Windows.UI.Color . Declaration public static string ToHexString(this Windows.UI.Color color) Parameters Type Name Description Windows.UI.Color color The Windows.UI.Color to get the hex value of. Returns Type Description System.String The hex value as a System.String . | Improve this Doc View Source ToSolidColorBrush(String) Converts the specified hex value to a Windows.UI.Xaml.Media.SolidColorBrush . Declaration public static SolidColorBrush ToSolidColorBrush(this string hexValue) Parameters Type Name Description System.String hexValue The hex value to convert. Returns Type Description SolidColorBrush A Windows.UI.Xaml.Media.SolidColorBrush representation of the specified color. | Improve this Doc View Source ToSolidColorBrush(Windows.UI.Color) Converts the specified Windows.UI.Color to a Windows.UI.Xaml.Media.SolidColorBrush . Declaration public static SolidColorBrush ToSolidColorBrush(this Windows.UI.Color color) Parameters Type Name Description Windows.UI.Color color The Windows.UI.Color to convert. Returns Type Description SolidColorBrush A Windows.UI.Xaml.Media.SolidColorBrush representation of the specified color. | Improve this Doc View Source ToSystemColor(Windows.UI.Color) Converts a Windows.UI.Color to a System.Drawing.Color . Declaration public static System.Drawing.Color ToSystemColor(this Windows.UI.Color color) Parameters Type Name Description Windows.UI.Color color The Windows.UI.Color to convert. Returns Type Description System.Drawing.Color A The System.Drawing.Color . | Improve this Doc View Source ToWindowsColor(String) Converts an ARGB or RGB hex value to a Windows.UI.Color . Declaration public static Windows.UI.Color ToWindowsColor(this string hexValue) Parameters Type Name Description System.String hexValue The ARGB or RGB hex value represented as a string. Returns Type Description Windows.UI.Color The Color representation of the ARGB hex string value."
  },
  "api/MADE.UI.ViewLoadedEventArgs.html": {
    "href": "api/MADE.UI.ViewLoadedEventArgs.html",
    "title": "Class ViewLoadedEventArgs | MADE Uno",
    "keywords": "Class ViewLoadedEventArgs Defines an event argument for a view having loaded. Inheritance System.Object ViewLoadedEventArgs Namespace : MADE.UI Assembly : MADE.UI.dll Syntax public class ViewLoadedEventArgs : EventArgs"
  },
  "api/MADE.UI.ViewLoadedEventHandler.html": {
    "href": "api/MADE.UI.ViewLoadedEventHandler.html",
    "title": "Delegate ViewLoadedEventHandler | MADE Uno",
    "keywords": "Delegate ViewLoadedEventHandler Defines a delegate for an event handler of view's having loaded. Namespace : MADE.UI Assembly : MADE.UI.dll Syntax public delegate void ViewLoadedEventHandler(object sender, ViewLoadedEventArgs args); Parameters Type Name Description System.Object sender The sender. ViewLoadedEventArgs args The view loaded event argument."
  },
  "api/MADE.UI.ViewManagement.html": {
    "href": "api/MADE.UI.ViewManagement.html",
    "title": "Namespace MADE.UI.ViewManagement | MADE Uno",
    "keywords": "Namespace MADE.UI.ViewManagement Classes ViewCoreDispatcherManager Defines a service for managing a view instance. ViewServiceChangedEventArgs<TService> Defines an event argument for a changed view service. ViewServiceManager<TService> Defines a generic base for managing view based services, such as CoreDispatchers. WindowManager Defines helper methods for handling multiple windows for an application. Interfaces IViewServiceManager<TService> Defines an interface for managing view based services, such as CoreDispatchers. Delegates ViewServiceChangedEventHandler<TService> Defines a delegate for an event handler of a view service having changed."
  },
  "api/MADE.UI.ViewManagement.IViewServiceManager-1.html": {
    "href": "api/MADE.UI.ViewManagement.IViewServiceManager-1.html",
    "title": "Interface IViewServiceManager<TService> | MADE Uno",
    "keywords": "Interface IViewServiceManager<TService> Defines an interface for managing view based services, such as CoreDispatchers. Namespace : MADE.UI.ViewManagement Assembly : MADE.UI.ViewManagement.dll Syntax public interface IViewServiceManager<TService> Type Parameters Name Description TService The type of service registered. Properties | Improve this Doc View Source Services Gets the collection of registered view services. Declaration IReadOnlyDictionary<int, TService> Services { get; } Property Value Type Description IReadOnlyDictionary < System.Int32 , TService> Methods | Improve this Doc View Source Get(Int32) Retrieves a service for the specified viewId . Declaration TService Get(int viewId) Parameters Type Name Description System.Int32 viewId The view identifier to retrieve the service for. Returns Type Description TService The registered service if exists; otherwise, null. | Improve this Doc View Source RegisterOrUpdate(Int32, TService) Registers or updates a service for the specified viewId . Declaration TService RegisterOrUpdate(int viewId, TService service) Parameters Type Name Description System.Int32 viewId The view identifier. TService service The service to register or update. Returns Type Description TService The registered service. | Improve this Doc View Source Unregister(Int32) Unregisters a service for the specified viewId if exists. Declaration bool Unregister(int viewId) Parameters Type Name Description System.Int32 viewId The view identifier to unregister the service for. Returns Type Description System.Boolean True if successfully unregistered; otherwise, false. Events | Improve this Doc View Source ServiceChanged Occurs when a view's service has changed. Declaration event ViewServiceChangedEventHandler<TService> ServiceChanged Event Type Type Description ViewServiceChangedEventHandler <TService>"
  },
  "api/MADE.UI.ViewManagement.ViewCoreDispatcherManager.html": {
    "href": "api/MADE.UI.ViewManagement.ViewCoreDispatcherManager.html",
    "title": "Class ViewCoreDispatcherManager | MADE Uno",
    "keywords": "Class ViewCoreDispatcherManager Defines a service for managing a view instance. Inheritance System.Object ViewServiceManager < CoreDispatcher > ViewCoreDispatcherManager Implements IViewServiceManager < CoreDispatcher > Inherited Members ViewServiceManager<CoreDispatcher>.ServiceChanged ViewServiceManager<CoreDispatcher>.Current ViewServiceManager<CoreDispatcher>.Services ViewServiceManager<CoreDispatcher>.RegisterOrUpdateForCurrentView(CoreDispatcher) ViewServiceManager<CoreDispatcher>.GetForCurrentView() ViewServiceManager<CoreDispatcher>.UnregisterForCurrentView() ViewServiceManager<CoreDispatcher>.RegisterOrUpdate(Int32, CoreDispatcher) ViewServiceManager<CoreDispatcher>.Get(Int32) ViewServiceManager<CoreDispatcher>.Unregister(Int32) Namespace : MADE.UI.ViewManagement Assembly : MADE.UI.ViewManagement.dll Syntax public class ViewCoreDispatcherManager : ViewServiceManager<CoreDispatcher>, IViewServiceManager<CoreDispatcher> Implements IViewServiceManager<TService>"
  },
  "api/MADE.UI.ViewManagement.ViewServiceChangedEventArgs-1.html": {
    "href": "api/MADE.UI.ViewManagement.ViewServiceChangedEventArgs-1.html",
    "title": "Class ViewServiceChangedEventArgs<TService> | MADE Uno",
    "keywords": "Class ViewServiceChangedEventArgs<TService> Defines an event argument for a changed view service. Inheritance System.Object ViewServiceChangedEventArgs<TService> Namespace : MADE.UI.ViewManagement Assembly : MADE.UI.ViewManagement.dll Syntax public class ViewServiceChangedEventArgs<TService> : EventArgs Type Parameters Name Description TService The type of service. Constructors | Improve this Doc View Source ViewServiceChangedEventArgs(Int32, TService) Initializes a new instance of the ViewServiceChangedEventArgs<TService> class. Declaration public ViewServiceChangedEventArgs(int viewId, TService service) Parameters Type Name Description System.Int32 viewId The view identifier for the changed service. TService service The service that has changed. Properties | Improve this Doc View Source Service Gets the service that has changed. Declaration public TService Service { get; } Property Value Type Description TService | Improve this Doc View Source ViewId Gets the view identifier for the changed service. Declaration public int ViewId { get; } Property Value Type Description System.Int32"
  },
  "api/MADE.UI.ViewManagement.ViewServiceChangedEventHandler-1.html": {
    "href": "api/MADE.UI.ViewManagement.ViewServiceChangedEventHandler-1.html",
    "title": "Delegate ViewServiceChangedEventHandler<TService> | MADE Uno",
    "keywords": "Delegate ViewServiceChangedEventHandler<TService> Defines a delegate for an event handler of a view service having changed. Namespace : MADE.UI.ViewManagement Assembly : MADE.UI.ViewManagement.dll Syntax public delegate void ViewServiceChangedEventHandler<TService>(object sender, ViewServiceChangedEventArgs<TService> args); Parameters Type Name Description System.Object sender The originator. ViewServiceChangedEventArgs <TService> args The service changed arguments containing the changed service and associated view identifier. Type Parameters Name Description TService The type of service."
  },
  "api/MADE.UI.ViewManagement.ViewServiceManager-1.html": {
    "href": "api/MADE.UI.ViewManagement.ViewServiceManager-1.html",
    "title": "Class ViewServiceManager<TService> | MADE Uno",
    "keywords": "Class ViewServiceManager<TService> Defines a generic base for managing view based services, such as CoreDispatchers. Inheritance System.Object ViewServiceManager<TService> ViewCoreDispatcherManager Implements IViewServiceManager <TService> Namespace : MADE.UI.ViewManagement Assembly : MADE.UI.ViewManagement.dll Syntax public class ViewServiceManager<TService> : object, IViewServiceManager<TService> Type Parameters Name Description TService The type of service registered. Constructors | Improve this Doc View Source ViewServiceManager() Initializes a new instance of the ViewServiceManager<TService> class. Declaration public ViewServiceManager() Properties | Improve this Doc View Source Current Gets an instance of the IViewServiceManager<TService> . Declaration public static IViewServiceManager<TService> Current { get; } Property Value Type Description IViewServiceManager <TService> | Improve this Doc View Source Services Gets the collection of registered view services. Declaration public IReadOnlyDictionary<int, TService> Services { get; } Property Value Type Description IReadOnlyDictionary < System.Int32 , TService> Methods | Improve this Doc View Source Get(Int32) Retrieves a service for the specified viewId . Declaration public TService Get(int viewId) Parameters Type Name Description System.Int32 viewId The view identifier to retrieve the service for. Returns Type Description TService The registered service if exists; otherwise, null. | Improve this Doc View Source GetForCurrentView() Retrieves a service for the current application view. Declaration public static TService GetForCurrentView() Returns Type Description TService The registered service if exists; otherwise, null. | Improve this Doc View Source RegisterOrUpdate(Int32, TService) Registers or updates a service for the specified viewId . Declaration public TService RegisterOrUpdate(int viewId, TService service) Parameters Type Name Description System.Int32 viewId The view identifier. TService service The service to register or update. Returns Type Description TService The registered service. | Improve this Doc View Source RegisterOrUpdateForCurrentView(TService) Registers or updates a service for the current application view. Declaration public static TService RegisterOrUpdateForCurrentView(TService service) Parameters Type Name Description TService service The service to register or update. Returns Type Description TService The registered service. | Improve this Doc View Source Unregister(Int32) Unregisters a service for the specified viewId if exists. Declaration public bool Unregister(int viewId) Parameters Type Name Description System.Int32 viewId The view identifier to unregister the service for. Returns Type Description System.Boolean True if successfully unregistered; otherwise, false. | Improve this Doc View Source UnregisterForCurrentView() Unregisters a service for the current application view if exists. Declaration public static bool UnregisterForCurrentView() Returns Type Description System.Boolean True if successfully unregistered; otherwise, false. Events | Improve this Doc View Source ServiceChanged Occurs when a view's service has changed. Declaration public event ViewServiceChangedEventHandler<TService> ServiceChanged Event Type Type Description ViewServiceChangedEventHandler <TService> Implements IViewServiceManager<TService>"
  },
  "api/MADE.UI.ViewManagement.WindowManager.html": {
    "href": "api/MADE.UI.ViewManagement.WindowManager.html",
    "title": "Class WindowManager | MADE Uno",
    "keywords": "Class WindowManager Defines helper methods for handling multiple windows for an application. Inheritance System.Object WindowManager Namespace : MADE.UI.ViewManagement Assembly : MADE.UI.ViewManagement.dll Syntax public static class WindowManager : object Methods | Improve this Doc View Source CreateNewWindowForPageAsync(String) Creates a new application with the specified page type and navigation parameter. Declaration public static async Task<bool> CreateNewWindowForPageAsync(string sourcePageName) Parameters Type Name Description System.String sourcePageName The page name to load in the new Window. Returns Type Description Task < System.Boolean > True if loaded; otherwise, false. | Improve this Doc View Source CreateNewWindowForPageAsync(String, Size) Creates a new application with the specified page type and navigation parameter. Declaration public static async Task<bool> CreateNewWindowForPageAsync(string sourcePageName, Size desiredSize) Parameters Type Name Description System.String sourcePageName The page name to load in the new Window. Size desiredSize The desired size of the new Window. Returns Type Description Task < System.Boolean > True if loaded; otherwise, false. | Improve this Doc View Source CreateNewWindowForPageAsync(String, Object) Creates a new application with the specified page type and navigation parameter. Declaration public static async Task<bool> CreateNewWindowForPageAsync(string sourcePageName, object parameter) Parameters Type Name Description System.String sourcePageName The page name to load in the new Window. System.Object parameter The parameter to load in the new Window. Returns Type Description Task < System.Boolean > True if loaded; otherwise, false. | Improve this Doc View Source CreateNewWindowForPageAsync(String, Object, Size) Creates a new application with the specified page type and navigation parameter. Declaration public static async Task<bool> CreateNewWindowForPageAsync(string sourcePageName, object parameter, Size desiredSize) Parameters Type Name Description System.String sourcePageName The page name to load in the new Window. System.Object parameter The parameter to load in the new Window. Size desiredSize The desired size of the new Window. Returns Type Description Task < System.Boolean > True if loaded; otherwise, false. | Improve this Doc View Source CreateNewWindowForPageAsync(Type) Creates a new application with the specified page type and navigation parameter. Declaration public static async Task<bool> CreateNewWindowForPageAsync(Type sourcePageType) Parameters Type Name Description Type sourcePageType The page type to load in the new Window. Returns Type Description Task < System.Boolean > True if loaded; otherwise, false. | Improve this Doc View Source CreateNewWindowForPageAsync(Type, Size) Creates a new application with the specified page type and navigation parameter. Declaration public static async Task<bool> CreateNewWindowForPageAsync(Type sourcePageType, Size desiredSize) Parameters Type Name Description Type sourcePageType The page type to load in the new Window. Size desiredSize The desired size of the new Window. Returns Type Description Task < System.Boolean > True if loaded; otherwise, false. | Improve this Doc View Source CreateNewWindowForPageAsync(Type, Object) Creates a new application with the specified page type and navigation parameter. Declaration public static async Task<bool> CreateNewWindowForPageAsync(Type sourcePageType, object parameter) Parameters Type Name Description Type sourcePageType The page type to load in the new Window. System.Object parameter The parameter to load in the new Window. Returns Type Description Task < System.Boolean > True if loaded; otherwise, false. | Improve this Doc View Source CreateNewWindowForPageAsync(Type, Object, Size) Creates a new application with the specified page type and navigation parameter. Declaration public static async Task<bool> CreateNewWindowForPageAsync(Type sourcePageType, object parameter, Size desiredSize) Parameters Type Name Description Type sourcePageType The page type to load in the new Window. System.Object parameter The parameter to load in the new Window. Size desiredSize The desired size of the new Window. Returns Type Description Task < System.Boolean > True if loaded; otherwise, false."
  },
  "api/MADE.UI.Views.Dialogs.AppDialog.html": {
    "href": "api/MADE.UI.Views.Dialogs.AppDialog.html",
    "title": "Class AppDialog | MADE Uno",
    "keywords": "Class AppDialog Defines a service for handling application system alert dialogs. Inheritance System.Object AppDialog Implements IAppDialog IDisposable Namespace : MADE.UI.Views.Dialogs Assembly : MADE.UI.Views.Dialogs.dll Syntax public class AppDialog : object, IAppDialog Constructors | Improve this Doc View Source AppDialog(CoreDispatcher) Initializes a new instance of the AppDialog class. Declaration public AppDialog(CoreDispatcher dispatcher) Parameters Type Name Description CoreDispatcher dispatcher The dispatcher for launching dialogs on the UI thread. Methods | Improve this Doc View Source Dispose() Disposes of the disposable components. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Disposes of the disposable components. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing A value indicating whether the object is disposing. | Improve this Doc View Source Show(String) Shows an application system alert dialog with the specified message. Declaration public void Show(string message) Parameters Type Name Description System.String message The message to display. | Improve this Doc View Source Show(String, Action, DialogButton[]) Shows an application system alert dialog with the specified message, cancellation action and dialog buttons. Declaration public void Show(string message, Action cancelAction, params DialogButton[] buttons) Parameters Type Name Description System.String message The message to display. Action cancelAction The action to perform when the dialog has been cancelled/dismissed. DialogButton [] buttons The button definitions for performing actions. | Improve this Doc View Source Show(String, DialogButton[]) Shows an application system alert dialog with the specified message and dialog buttons. Declaration public void Show(string message, params DialogButton[] buttons) Parameters Type Name Description System.String message The message to display. DialogButton [] buttons The button definitions for performing actions. | Improve this Doc View Source Show(String, String) Shows an application system alert dialog with the specified title and message. Declaration public void Show(string title, string message) Parameters Type Name Description System.String title The title to display. System.String message The message to display. | Improve this Doc View Source Show(String, String, Action, DialogButton[]) Shows an application system alert dialog with the specified title, message, cancellation action and dialog buttons. Declaration public void Show(string title, string message, Action cancelAction, params DialogButton[] buttons) Parameters Type Name Description System.String title The title to display. System.String message The message to display. Action cancelAction The action to perform when the dialog has been cancelled/dismissed. DialogButton [] buttons The button definitions for performing actions. | Improve this Doc View Source Show(String, String, DialogButton[]) Shows an application system alert dialog with the specified title, message and dialog buttons. Declaration public void Show(string title, string message, params DialogButton[] buttons) Parameters Type Name Description System.String title The title to display. System.String message The message to display. DialogButton [] buttons The button definitions for performing actions. | Improve this Doc View Source ShowAsync(String) Shows an application system alert dialog with the specified message. Declaration public Task ShowAsync(string message) Parameters Type Name Description System.String message The message to display. Returns Type Description Task An asynchronous operation. | Improve this Doc View Source ShowAsync(String, Action, DialogButton[]) Shows an application system alert dialog with the specified message, cancellation action and dialog buttons. Declaration public Task ShowAsync(string message, Action cancelAction, params DialogButton[] buttons) Parameters Type Name Description System.String message The message to display. Action cancelAction The action to perform when the dialog has been cancelled/dismissed. DialogButton [] buttons The button definitions for performing actions. Returns Type Description Task An asynchronous operation. | Improve this Doc View Source ShowAsync(String, DialogButton[]) Shows an application system alert dialog with the specified message and dialog buttons. Declaration public Task ShowAsync(string message, params DialogButton[] buttons) Parameters Type Name Description System.String message The message to display. DialogButton [] buttons The button definitions for performing actions. Returns Type Description Task An asynchronous operation. | Improve this Doc View Source ShowAsync(String, String) Shows an application system alert dialog with the specified title and message. Declaration public Task ShowAsync(string title, string message) Parameters Type Name Description System.String title The title to display. System.String message The message to display. Returns Type Description Task An asynchronous operation. | Improve this Doc View Source ShowAsync(String, String, Action, DialogButton[]) Shows an application system alert dialog with the specified title, message, cancellation action and dialog buttons. Declaration public async Task ShowAsync(string title, string message, Action cancelAction, params DialogButton[] buttons) Parameters Type Name Description System.String title The title to display. System.String message The message to display. Action cancelAction The action to perform when the dialog has been cancelled/dismissed. DialogButton [] buttons The button definitions for performing actions. Returns Type Description Task An asynchronous operation. | Improve this Doc View Source ShowAsync(String, String, DialogButton[]) Shows an application system alert dialog with the specified title, message and dialog buttons. Declaration public Task ShowAsync(string title, string message, params DialogButton[] buttons) Parameters Type Name Description System.String title The title to display. System.String message The message to display. DialogButton [] buttons The button definitions for performing actions. Returns Type Description Task An asynchronous operation. Implements IAppDialog IDisposable"
  },
  "api/MADE.UI.Views.Dialogs.Buttons.DialogButton.html": {
    "href": "api/MADE.UI.Views.Dialogs.Buttons.DialogButton.html",
    "title": "Class DialogButton | MADE Uno",
    "keywords": "Class DialogButton Defines a button to be used within a application system alert dialog. Inheritance System.Object DialogButton Namespace : MADE.UI.Views.Dialogs.Buttons Assembly : MADE.UI.Views.Dialogs.dll Syntax public class DialogButton : object Constructors | Improve this Doc View Source DialogButton(DialogButtonType) Initializes a new instance of the DialogButton class. Declaration public DialogButton(DialogButtonType type) Parameters Type Name Description DialogButtonType type The type of button. | Improve this Doc View Source DialogButton(DialogButtonType, String) Initializes a new instance of the DialogButton class with content text. Declaration public DialogButton(DialogButtonType type, string content) Parameters Type Name Description DialogButtonType type The type of button. System.String content The content text to display on the button. | Improve this Doc View Source DialogButton(DialogButtonType, String, DialogButtonInvokedHandler) Initializes a new instance of the DialogButton class with content text and an invoke action. Declaration public DialogButton(DialogButtonType type, string content, DialogButtonInvokedHandler invokeAction) Parameters Type Name Description DialogButtonType type The type of button. System.String content The content text to display on the button. DialogButtonInvokedHandler invokeAction The action to perform when the button is invoked. Properties | Improve this Doc View Source Content Gets or sets the content text to display on the button. Declaration public string Content { get; set; } Property Value Type Description System.String | Improve this Doc View Source InvokeAction Gets or sets the action to perform when the button is invoked. Declaration public DialogButtonInvokedHandler InvokeAction { get; set; } Property Value Type Description DialogButtonInvokedHandler | Improve this Doc View Source Type Gets the type of button. Declaration public DialogButtonType Type { get; } Property Value Type Description DialogButtonType Methods | Improve this Doc View Source Invoke() Invokes the specified InvokeAction . Declaration public void Invoke()"
  },
  "api/MADE.UI.Views.Dialogs.Buttons.DialogButtonInvokedHandler.html": {
    "href": "api/MADE.UI.Views.Dialogs.Buttons.DialogButtonInvokedHandler.html",
    "title": "Delegate DialogButtonInvokedHandler | MADE Uno",
    "keywords": "Delegate DialogButtonInvokedHandler The event handler for handling when a dialog button has been invoked. Namespace : MADE.UI.Views.Dialogs.Buttons Assembly : MADE.UI.Views.Dialogs.dll Syntax public delegate void DialogButtonInvokedHandler(DialogButton button); Parameters Type Name Description DialogButton button The button."
  },
  "api/MADE.UI.Views.Dialogs.Buttons.DialogButtonType.html": {
    "href": "api/MADE.UI.Views.Dialogs.Buttons.DialogButtonType.html",
    "title": "Enum DialogButtonType | MADE Uno",
    "keywords": "Enum DialogButtonType Defines values associated with the type of a dialog button. Namespace : MADE.UI.Views.Dialogs.Buttons Assembly : MADE.UI.Views.Dialogs.dll Syntax public enum DialogButtonType : int Fields Name Description Cancel The button is cancelling and can be used to perform negative actions. Confirm The button is confirming and can be used to perform positive actions. Neutral The button is neutral and can be used to perform any action."
  },
  "api/MADE.UI.Views.Dialogs.Buttons.html": {
    "href": "api/MADE.UI.Views.Dialogs.Buttons.html",
    "title": "Namespace MADE.UI.Views.Dialogs.Buttons | MADE Uno",
    "keywords": "Namespace MADE.UI.Views.Dialogs.Buttons Classes DialogButton Defines a button to be used within a application system alert dialog. Enums DialogButtonType Defines values associated with the type of a dialog button. Delegates DialogButtonInvokedHandler The event handler for handling when a dialog button has been invoked."
  },
  "api/MADE.UI.Views.Dialogs.html": {
    "href": "api/MADE.UI.Views.Dialogs.html",
    "title": "Namespace MADE.UI.Views.Dialogs | MADE Uno",
    "keywords": "Namespace MADE.UI.Views.Dialogs Classes AppDialog Defines a service for handling application system alert dialogs. Interfaces IAppDialog Defines an interface for handling application system alert dialogs."
  },
  "api/MADE.UI.Views.Dialogs.IAppDialog.html": {
    "href": "api/MADE.UI.Views.Dialogs.IAppDialog.html",
    "title": "Interface IAppDialog | MADE Uno",
    "keywords": "Interface IAppDialog Defines an interface for handling application system alert dialogs. Namespace : MADE.UI.Views.Dialogs Assembly : MADE.UI.Views.Dialogs.dll Syntax public interface IAppDialog Methods | Improve this Doc View Source Show(String) Shows an application system alert dialog with the specified message. Declaration void Show(string message) Parameters Type Name Description System.String message The message to display. | Improve this Doc View Source Show(String, Action, DialogButton[]) Shows an application system alert dialog with the specified message, cancellation action and dialog buttons. Declaration void Show(string message, Action cancelAction, params DialogButton[] buttons) Parameters Type Name Description System.String message The message to display. Action cancelAction The action to perform when the dialog has been cancelled/dismissed. DialogButton [] buttons The button definitions for performing actions. | Improve this Doc View Source Show(String, DialogButton[]) Shows an application system alert dialog with the specified message and dialog buttons. Declaration void Show(string message, params DialogButton[] buttons) Parameters Type Name Description System.String message The message to display. DialogButton [] buttons The button definitions for performing actions. | Improve this Doc View Source Show(String, String) Shows an application system alert dialog with the specified title and message. Declaration void Show(string title, string message) Parameters Type Name Description System.String title The title to display. System.String message The message to display. | Improve this Doc View Source Show(String, String, Action, DialogButton[]) Shows an application system alert dialog with the specified title, message, cancellation action and dialog buttons. Declaration void Show(string title, string message, Action cancelAction, params DialogButton[] buttons) Parameters Type Name Description System.String title The title to display. System.String message The message to display. Action cancelAction The action to perform when the dialog has been cancelled/dismissed. DialogButton [] buttons The button definitions for performing actions. | Improve this Doc View Source Show(String, String, DialogButton[]) Shows an application system alert dialog with the specified title, message and dialog buttons. Declaration void Show(string title, string message, params DialogButton[] buttons) Parameters Type Name Description System.String title The title to display. System.String message The message to display. DialogButton [] buttons The button definitions for performing actions. | Improve this Doc View Source ShowAsync(String) Shows an application system alert dialog with the specified message. Declaration Task ShowAsync(string message) Parameters Type Name Description System.String message The message to display. Returns Type Description Task An asynchronous operation. | Improve this Doc View Source ShowAsync(String, Action, DialogButton[]) Shows an application system alert dialog with the specified message, cancellation action and dialog buttons. Declaration Task ShowAsync(string message, Action cancelAction, params DialogButton[] buttons) Parameters Type Name Description System.String message The message to display. Action cancelAction The action to perform when the dialog has been cancelled/dismissed. DialogButton [] buttons The button definitions for performing actions. Returns Type Description Task An asynchronous operation. | Improve this Doc View Source ShowAsync(String, DialogButton[]) Shows an application system alert dialog with the specified message and dialog buttons. Declaration Task ShowAsync(string message, params DialogButton[] buttons) Parameters Type Name Description System.String message The message to display. DialogButton [] buttons The button definitions for performing actions. Returns Type Description Task An asynchronous operation. | Improve this Doc View Source ShowAsync(String, String) Shows an application system alert dialog with the specified title and message. Declaration Task ShowAsync(string title, string message) Parameters Type Name Description System.String title The title to display. System.String message The message to display. Returns Type Description Task An asynchronous operation. | Improve this Doc View Source ShowAsync(String, String, Action, DialogButton[]) Shows an application system alert dialog with the specified title, message, cancellation action and dialog buttons. Declaration Task ShowAsync(string title, string message, Action cancelAction, params DialogButton[] buttons) Parameters Type Name Description System.String title The title to display. System.String message The message to display. Action cancelAction The action to perform when the dialog has been cancelled/dismissed. DialogButton [] buttons The button definitions for performing actions. Returns Type Description Task An asynchronous operation. | Improve this Doc View Source ShowAsync(String, String, DialogButton[]) Shows an application system alert dialog with the specified title, message and dialog buttons. Declaration Task ShowAsync(string title, string message, params DialogButton[] buttons) Parameters Type Name Description System.String title The title to display. System.String message The message to display. DialogButton [] buttons The button definitions for performing actions. Returns Type Description Task An asynchronous operation."
  },
  "api/MADE.UI.Views.Navigation.html": {
    "href": "api/MADE.UI.Views.Navigation.html",
    "title": "Namespace MADE.UI.Views.Navigation | MADE Uno",
    "keywords": "Namespace MADE.UI.Views.Navigation Classes NavigationService Defines a service for frame based page-to-page navigation. Interfaces INavigationService Defines an interface for frame based page-to-page navigation."
  },
  "api/MADE.UI.Views.Navigation.INavigationService.html": {
    "href": "api/MADE.UI.Views.Navigation.INavigationService.html",
    "title": "Interface INavigationService | MADE Uno",
    "keywords": "Interface INavigationService Defines an interface for frame based page-to-page navigation. Namespace : MADE.UI.Views.Navigation Assembly : MADE.UI.Views.Navigation.dll Syntax public interface INavigationService Properties | Improve this Doc View Source CanGoBack Gets a value indicating whether there is at least one entry in back navigation history. Declaration bool CanGoBack { get; } Property Value Type Description System.Boolean | Improve this Doc View Source CurrentPageType Gets the type associated with the current page. Declaration Type CurrentPageType { get; } Property Value Type Description Type | Improve this Doc View Source NavigationFrame Gets or sets the frame used for navigation. Declaration Frame NavigationFrame { get; set; } Property Value Type Description Frame Methods | Improve this Doc View Source GoBack() Attempts to navigate the current frame backwards. Declaration bool GoBack() Returns Type Description System.Boolean Returns true if the navigation service successfully navigates backwards; otherwise, false. | Improve this Doc View Source NavigateTo(Type) Navigates the current frame to the page specified by the given page type. Declaration bool NavigateTo(Type pageType) Parameters Type Name Description Type pageType The type associated with the page to navigate to. Returns Type Description System.Boolean Returns true if the navigation service successfully navigated to the page; otherwise, false. | Improve this Doc View Source NavigateTo(Type, Object) Navigates the current frame to the page specified by the given page type. Declaration bool NavigateTo(Type pageType, object parameter) Parameters Type Name Description Type pageType The type associated with the page to navigate to. System.Object parameter The parameter to pass to the page on navigation. Returns Type Description System.Boolean Returns true if the navigation service successfully navigated to the page; otherwise, false. Events | Improve this Doc View Source Navigated Occurs when a page has navigated. Declaration event EventHandler<bool> Navigated Event Type Type Description EventHandler < System.Boolean >"
  },
  "api/MADE.UI.Views.Navigation.NavigationService.html": {
    "href": "api/MADE.UI.Views.Navigation.NavigationService.html",
    "title": "Class NavigationService | MADE Uno",
    "keywords": "Class NavigationService Defines a service for frame based page-to-page navigation. Inheritance System.Object NavigationService Implements INavigationService Namespace : MADE.UI.Views.Navigation Assembly : MADE.UI.Views.Navigation.dll Syntax public class NavigationService : object, INavigationService Constructors | Improve this Doc View Source NavigationService(Frame) Initializes a new instance of the NavigationService class. Declaration public NavigationService(Frame navigationFrame = null) Parameters Type Name Description Frame navigationFrame The frame used for navigation. Properties | Improve this Doc View Source CanGoBack Gets a value indicating whether there is at least one entry in back navigation history. Declaration public bool CanGoBack { get; } Property Value Type Description System.Boolean | Improve this Doc View Source CurrentPageType Gets the type associated with the current page. Declaration public Type CurrentPageType { get; } Property Value Type Description Type | Improve this Doc View Source NavigationFrame Gets or sets the frame used for navigation. Declaration public Frame NavigationFrame { get; set; } Property Value Type Description Frame Methods | Improve this Doc View Source GoBack() Attempts to navigate the current frame backwards. Declaration public virtual bool GoBack() Returns Type Description System.Boolean Returns true if the navigation service successfully navigates backwards; otherwise, false. | Improve this Doc View Source NavigateTo(Type) Navigates the current frame to the page specified by the given page type. Declaration public virtual bool NavigateTo(Type pageType) Parameters Type Name Description Type pageType The type associated with the page to navigate to. Returns Type Description System.Boolean Returns true if the navigation service successfully navigated to the page; otherwise, false. | Improve this Doc View Source NavigateTo(Type, Object) Navigates the current frame to the page specified by the given page type. Declaration public virtual bool NavigateTo(Type pageType, object parameter) Parameters Type Name Description Type pageType The type associated with the page to navigate to. System.Object parameter The parameter to pass to the page on navigation. Returns Type Description System.Boolean Returns true if the navigation service successfully navigated to the page; otherwise, false. Events | Improve this Doc View Source Navigated Occurs when a page has navigated. Declaration public event EventHandler<bool> Navigated Event Type Type Description EventHandler < System.Boolean > Implements INavigationService"
  },
  "api/MADE.UI.Views.Navigation.Pages.html": {
    "href": "api/MADE.UI.Views.Navigation.Pages.html",
    "title": "Namespace MADE.UI.Views.Navigation.Pages | MADE Uno",
    "keywords": "Namespace MADE.UI.Views.Navigation.Pages Classes MvvmPage Defines an MVVM friendly page that is compatible with the Windows Community Toolkit MVVM library. Page Defines an extended page implementation."
  },
  "api/MADE.UI.Views.Navigation.Pages.MvvmPage.html": {
    "href": "api/MADE.UI.Views.Navigation.Pages.MvvmPage.html",
    "title": "Class MvvmPage | MADE Uno",
    "keywords": "Class MvvmPage Defines an MVVM friendly page that is compatible with the Windows Community Toolkit MVVM library. Inheritance System.Object Page MvvmPage Inherited Members Page.ViewLoaded Page.IsVisibleChanged Page.IsVisible Namespace : MADE.UI.Views.Navigation.Pages Assembly : MADE.UI.Views.Navigation.Mvvm.dll Syntax public class MvvmPage : Page Methods | Improve this Doc View Source OnNavigatedFrom(NavigationEventArgs) Called when the page has been navigated from. Declaration protected override void OnNavigatedFrom(NavigationEventArgs e) Parameters Type Name Description NavigationEventArgs e The navigation event argument for the navigation. | Improve this Doc View Source OnNavigatedTo(NavigationEventArgs) Called when the page has been navigated to. Declaration protected override void OnNavigatedTo(NavigationEventArgs e) Parameters Type Name Description NavigationEventArgs e The navigation event argument for the navigation. | Improve this Doc View Source OnNavigatingFrom(NavigatingCancelEventArgs) Called when the page is being navigated from. Declaration protected override void OnNavigatingFrom(NavigatingCancelEventArgs e) Parameters Type Name Description NavigatingCancelEventArgs e The navigation event argument for the navigation supporting the cancellation of the navigation. | Improve this Doc View Source OnPageLoaded() Called when the page has loaded. Declaration public override void OnPageLoaded() Overrides Page.OnPageLoaded()"
  },
  "api/MADE.UI.Views.Navigation.Pages.Page.html": {
    "href": "api/MADE.UI.Views.Navigation.Pages.Page.html",
    "title": "Class Page | MADE Uno",
    "keywords": "Class Page Defines an extended page implementation. Inheritance System.Object Page MvvmPage Namespace : MADE.UI.Views.Navigation.Pages Assembly : MADE.UI.Views.Navigation.dll Syntax public class Page : Windows.UI.Xaml.Controls.Page Constructors | Improve this Doc View Source Page() Initializes a new instance of the Page class. Declaration public Page() Properties | Improve this Doc View Source IsVisible Gets or sets a value indicating whether the view is visible in the UI. Declaration public bool IsVisible { get; set; } Property Value Type Description System.Boolean Exceptions Type Condition System.Exception A delegate callback throws an exception. Methods | Improve this Doc View Source OnPageLoaded() Called when the page has loaded. Declaration public virtual void OnPageLoaded() Events | Improve this Doc View Source IsVisibleChanged Occurs when the IsVisible state has changed. Declaration public event EventHandler<bool> IsVisibleChanged Event Type Type Description EventHandler < System.Boolean > | Improve this Doc View Source ViewLoaded Occurs when the view has loaded. Declaration public event ViewLoadedEventHandler ViewLoaded Event Type Type Description ViewLoadedEventHandler"
  },
  "api/MADE.UI.Views.Navigation.ViewModels.html": {
    "href": "api/MADE.UI.Views.Navigation.ViewModels.html",
    "title": "Namespace MADE.UI.Views.Navigation.ViewModels | MADE Uno",
    "keywords": "Namespace MADE.UI.Views.Navigation.ViewModels Classes PageViewModel Defines a view-model for a MADE page."
  },
  "api/MADE.UI.Views.Navigation.ViewModels.PageViewModel.html": {
    "href": "api/MADE.UI.Views.Navigation.ViewModels.PageViewModel.html",
    "title": "Class PageViewModel | MADE Uno",
    "keywords": "Class PageViewModel Defines a view-model for a MADE page. Inheritance System.Object PageViewModel Namespace : MADE.UI.Views.Navigation.ViewModels Assembly : MADE.UI.Views.Navigation.Mvvm.dll Syntax public class PageViewModel : ObservableObject Constructors | Improve this Doc View Source PageViewModel(INavigationService, IMessenger) Initializes a new instance of the PageViewModel class. Declaration public PageViewModel(INavigationService navigationService, IMessenger messenger) Parameters Type Name Description INavigationService navigationService The INavigationService for navigating from page to page. IMessenger messenger The for exchanging messages between objects. Properties | Improve this Doc View Source GoBackCommand Gets the associated with navigating back. Declaration public ICommand GoBackCommand { get; } Property Value Type Description ICommand | Improve this Doc View Source Messenger Gets the for exchanging messages between objects. Declaration public IMessenger Messenger { get; } Property Value Type Description IMessenger | Improve this Doc View Source NavigationService Gets the INavigationService for navigating from page to page. Declaration public INavigationService NavigationService { get; } Property Value Type Description INavigationService Methods | Improve this Doc View Source GoBack() Declaration protected virtual void GoBack() | Improve this Doc View Source OnNavigatedFrom(NavigationEventArgs) Called when the page has been navigated from. Declaration public virtual void OnNavigatedFrom(NavigationEventArgs e) Parameters Type Name Description NavigationEventArgs e The navigation event argument for the navigation. | Improve this Doc View Source OnNavigatedTo(NavigationEventArgs) Called when the page has been navigated to. Declaration public virtual void OnNavigatedTo(NavigationEventArgs e) Parameters Type Name Description NavigationEventArgs e The navigation event argument for the navigation. | Improve this Doc View Source OnNavigatingFrom(NavigatingCancelEventArgs) Called when the page is being navigated from. Declaration public virtual void OnNavigatingFrom(NavigatingCancelEventArgs e) Parameters Type Name Description NavigatingCancelEventArgs e The navigation event argument for the navigation supporting the cancellation of the navigation. | Improve this Doc View Source OnPageLoaded() Called when the page has loaded. Declaration public virtual void OnPageLoaded()"
  },
  "articles/features/ui.html": {
    "href": "articles/features/ui.html",
    "title": "Using the UI package | MADE Uno",
    "keywords": "Using the UI package The UI package is a base package for building out UI components for native applications for Windows, Android, iOS, macOS, Linux, and the web. Its main purpose is to be used by the additional MADE Uno UI packages. However, it can be used to build your own custom UI elements for your own applications. Building custom controls for Windows or Uno Platform applications The MADE.UI.Controls.Control is an extension to the Windows.UI.Xaml.Controls.Control that provides additional base components to make it easier to build custom controls. For detail on building the custom control itself, we highly recommend these resources for information on building them. Nick's .NET Travels - How to create a XAML templated control With this base class, you get the following additional features to work with. IsVisible property IsVisible is a boolean property that controls the Visibility state of the control. When updated, the IsVisibleChanged event is fired which can be used to handle additional functions when a control is shown or hidden. GetChildView{TView} method GetChildView{TView}(string) is a method which sits on top of the GetTemplateChild method of the underlying Control class. The method simplifies the understanding and usability of retrieving child UI elements by retrieving your UI elements in the expected type."
  },
  "articles/features/ui-controls-chipbox.html": {
    "href": "articles/features/ui-controls-chipbox.html",
    "title": "Using the ChipBox control | MADE Uno",
    "keywords": "Using the ChipBox control The MADE.UI.Controls.ChipBox element is a custom-built UI element that works with Uno's supported platforms that provides a multi value input for a text box with auto-suggest capabilities. Values added are displayed as removable chips. The control is a familiar custom input style control used in web applications. Shown below is the visuals for the control in its default state, with some chip values already added. Example usage <Page x:Class=\"ChipBoxSample.MainPage\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:controls=\"using:MADE.UI.Controls\" xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\" mc:Ignorable=\"d\"> <RelativePanel Padding=\"12\"> <controls:ChipBox x:Name=\"ChipBoxControl\" Margin=\"0,12,0,0\" Suggestions=\"{x:Bind ChipSuggestions}\" Chips=\"{x:Bind SelectedChips}\" TextChangeCommand=\"{x:Bind SuggestionTextChangeCommand}\" Header=\"ChipBox\" RelativePanel.AlignLeftWithPanel=\"True\" RelativePanel.AlignRightWithPanel=\"True\" RelativePanel.AlignTopWithPanel=\"True\" /> </RelativePanel> </Page> Retrieving added chip values The control exposes the selected chips through the Chips list property. The type of objects contained in this collection will be ChipItem which contains the contents of the item as a generic Object type. This allows the ChipBox control to support any type of input value object. Providing suggestions for chip values The ChipBox provides a Suggestions property that can be used to provide a list of objects that should be displayed to the user as suggestions. The control exposes a TextChangeCommand property and a TextChanged event that can be used to provide the ability to customize and provide relevant suggestions based on the text provided. This is not a baked in feature of the control itself. Here is an example of using this in action. private static readonly IList<string> Places = new List<string> { \"Austria\", \"Belgium\", \"Bulgaria\", \"Croatia\", \"Cyprus\", \"Czechia\", \"Denmark\", \"Estonia\", \"Finland\", \"France\", \"Germany\", \"Greece\", \"Hungary\", \"Ireland\", \"Italy\", \"Latvia\", \"Lithuania\", \"Luxembourg\", \"Malta\", \"Netherlands\", \"Poland\", \"Portugal\", \"Romania\", \"Slovakia\", \"Slovenia\", \"Spain\", \"Sweden\" }; public ICommand SuggestionTextChangeCommand => new RelayCommand<string>(this.OnSuggestionTextChanged); public ObservableCollection<string> ChipSuggestions { get; } = new(Places); private void OnSuggestionTextChanged(string obj) { ChipSuggestions.MakeEqualTo(Places.Where(x => x.Contains(obj, StringComparison.CurrentCultureIgnoreCase))); } It is up to the developer to implement the logic to provide suggestions. This is to ensure any flexibility in search and filtering is determined by the application rather than the control. Customizing the ChipBox The control has many customization properties that are exposed to tailor the experience for your application. HeaderTemplate The Header can be customized to include custom UI elements as well as a string resource. The HeaderTemplate is also available to provide a DataTemplate for you to define the rendered UI for the Header . ChipContentTemplate The rendered UI elements for the chips use a MADE Chip content control. By default, the chips will be rendered displaying the string equivalent of the content provided to it. To customize the layout and display of the chip's content, apply a DataTemplate to the ChipContentTemplate property. SuggestionsItemTemplate As suggestions could be a list of complex objects rather than a simple string, the control provides a SuggestionsItemTemplate property that can be used to provide a DataTemplate for the suggestions that are displayed to the user. IsReadonly The ChipBox has the ability to be rendered in a readonly state. This is useful when you want to display the chips without any user interaction. When enabled, the auto-suggest text box will not be displayed to the user, and the ability to remove chips will be disabled. AllowDuplicate By default, the ChipBox control allows duplicate values to be accepted. The AllowDuplicate property can be used to disable this behavior. AllowFreeText The control supports the ability to allow free text input for chip values, as well as the option to only support selections from the suggestions list. The AllowFreeText property, enabled by default, can be used to control this behavior."
  },
  "articles/features/ui-controls-dropdownlist.html": {
    "href": "articles/features/ui-controls-dropdownlist.html",
    "title": "Using the DropDownList control | MADE Uno",
    "keywords": "Using the DropDownList control The MADE.UI.Controls.DropDownList element is a custom-built UI element that works with Uno's supported platforms that provides a selection user experience, allowing a user to select one or multiple items from a list. The control works in a similar way to the ComboBox element in the Windows SDK, with the added extensibility to change modes to select multiple items. Shown below is the visuals for the control in its default state, in a multiple selection mode. Example usage <Page x:Class=\"DropDownListSample.MainPage\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:controls=\"using:MADE.UI.Controls\" xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\" mc:Ignorable=\"d\"> <RelativePanel Padding=\"12\"> <controls:DropDownList x:Name=\"DropDownList\" Header=\"MultiDropDownList\" ItemsSource=\"{x:Bind ViewModel.ItemCollection}\" RelativePanel.AlignLeftWithPanel=\"True\" RelativePanel.AlignRightWithPanel=\"True\" RelativePanel.AlignTopWithPanel=\"True\" SelectionMode=\"Multiple\" /> </RelativePanel> </Page> Customizing the DropDownList The control has many customization properties that are exposed to tailor the experience for your application. HeaderTemplate The Header can be customized to include custom UI elements as well as a string resource. The HeaderTemplate is also available to provide a DataTemplate for you to define the rendered UI for the Header . ItemTemplate and ItemTemplateSelector The rendered UI elements for the items in the control can be customized with the ItemTemplate or ItemTemplateSelector . SelectionMode The DropDownList has two selection modes, Single and Multiple . By default, the control works in a Single selection mode. MaxDropDownHeight The height of the drop-down can be customized to allow you to show more results that the default expanded view. By default, the drop down will expand to 248 pixels."
  },
  "articles/features/ui-controls-filepicker.html": {
    "href": "articles/features/ui-controls-filepicker.html",
    "title": "Using the FilePicker control | MADE Uno",
    "keywords": "Using the FilePicker control The MADE.UI.Controls.FilePicker element is a custom-built UI element that works with Uno's supported platforms that provides a file selection user experience. The control works in a similar way to the <input type=\"file\" /> element in web applications. Shown below is the visuals for the control in its default state, in a multiple selection mode. Example usage <Page x:Class=\"FilePickerSample.MainPage\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:controls=\"using:MADE.UI.Controls\" xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\" mc:Ignorable=\"d\"> <RelativePanel Padding=\"12\"> <controls:FilePicker x:Name=\"FilePickerControl\" Margin=\"0,12,0,0\" AppendFiles=\"True\" Files=\"{x:Bind FilePickerFiles}\" Header=\"FilePicker\" RelativePanel.AlignLeftWithPanel=\"True\" RelativePanel.AlignRightWithPanel=\"True\" RelativePanel.AlignTopWithPanel=\"True\" SelectionMode=\"Multiple\" /> </RelativePanel> </Page> Retrieving selected files The control exposes the selected files through the Files list property. The type of objects contained in this collection will be FilePickerItem which contains the details for the file including: The file as a StorageFile The thumbnail as a BitmapImage The file name including the extension The display name The file type The file path Customizing the FilePicker The control has many customization properties that are exposed to tailor the experience for your application. HeaderTemplate The Header can be customized to include custom UI elements as well as a string resource. The HeaderTemplate is also available to provide a DataTemplate for you to define the rendered UI for the Header . ChooseFileButtonContent and ChooseFileButtonContentTemplate The ChooseFileButtonContent can be used to set the UI elements or string resource displayed on the button. The rendered UI elements for the button content in the control can also be customized with the ChooseFileButtonContentTemplate . SelectionMode The FilePicker has two selection modes, Single and Multiple . By default, the control works in a Single selection mode. FileTypes When the user selects the button to choose files, you can customize what files can be selected using a list of file extensions with the FileTypes property. By default, the control will allow any file to be selected using the * selector. AppendFiles If multiple selection is enabled, the AppendFiles boolean flag will allow your user to append additional files to the existing selections if they choose to add more files. By default, this is false which will overwrite the files chosen on subsequent additions. ItemsViewStyle The ItemsViewStyle controls the styling applied to the view which displays the selected items. The default user experience styling is shown at the top of this article."
  },
  "articles/features/ui-controls-richedittoolbar.html": {
    "href": "articles/features/ui-controls-richedittoolbar.html",
    "title": "Using the RichEditToolbar control | MADE Uno",
    "keywords": "Using the RichEditToolbar control The MADE.UI.Controls.RichEditToolbar element is a custom-built UI element that works with Uno's supported platforms that provides customizable and extensible collection of buttons that activate rich text features in an associated RichEditBox . Shown below is the visuals for the control in its default state. Example usage <Page x:Class=\"ChipBoxSample.MainPage\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:controls=\"using:MADE.UI.Controls\" xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:win=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\" mc:Ignorable=\"d\"> <Grid> <Grid.RowDefinitions> <RowDefinition Height=\"Auto\" /> <RowDefinition Height=\"*\" /> </Grid.RowDefinitions> <controls:RichEditToolbar x:Name=\"RichEditToolbarControl\" TargetRichEditBox=\"{x:Bind RichEditBox}\" ShowFontSizeOptions=\"True\" ShowTextColorOptions=\"True\" ShowListStyleOptions=\"True\"> <controls:RichEditToolbar.CustomOptions> <AppBarSeparator /> <AppBarButton x:Name=\"SaveButton\" Icon=\"Save\" Label=\"Save\" /> <AppBarButton x:Name=\"UndoButton\" Icon=\"Undo\" Label=\"Undo\" /> <AppBarButton x:Name=\"RedoButton\" Icon=\"Redo\" Label=\"Redo\" /> </controls:RichEditToolbar.CustomOptions> </controls:RichEditToolbar> <win:RichEditBox x:Name=\"RichEditBox\" Grid.Row=\"1\" /> </Grid> </Page> Supporting Uno Platform Unfortunately, Uno Platform doesn't currently support the use of RichEditBox . The control has been custom built now to structure around the unsupported direct attachment to a RichEditBox exposing events that allow a developer to use the control in a different context in Uno Platform applications. You can listen for these changes by hooking onto the following RichEditToolbar events: FontSizeChanged FontStyleChanged TextColorChanged ListStyleChanged These are fired when the user changes the font size, font style, text color, or list style. Each event provides an event argument that provides the new values for that setting. Customizing the ChipBox The control has many customization properties that are exposed to tailor the experience for your application. Custom toolbar options As well as the out-of-the-box options available, the RichEditToolbar allows developers to extend the options with additional custom options. These can be added to the CustomOptions collection on the control either via XAML or in code. <controls:RichEditToolbar> <controls:RichEditToolbar.CustomOptions> <AppBarButton x:Name=\"SaveButton\" Icon=\"Save\" Label=\"Save\" /> <AppBarButton x:Name=\"UndoButton\" Icon=\"Undo\" Label=\"Undo\" /> <AppBarButton x:Name=\"RedoButton\" Icon=\"Redo\" Label=\"Redo\" /> </controls:RichEditToolbar.CustomOptions> </controls:RichEditToolbar> Custom text color options Exposed on the RichEditToolbar is a CustomTextColorOptions property that allows you to provide your own custom set of colors to display in the text color options panel. Here's an example of adding these via code. private static readonly IList<RichEditToolbarTextColorOption> CustomTextColorOptions = new List<RichEditToolbarTextColorOption> { new() {Name = \"Pastel pink\", Color = \"#ff80ff\"}, new() {Name = \"Pastel orange\", Color = \"#ffc680\"}, new() {Name = \"Pastel yellow\", Color = \"#ffff80\"}, new() {Name = \"Pastel green\", Color = \"#80ff9e\"}, new() {Name = \"Pastel blue\", Color = \"#80d6ff\"}, new() {Name = \"Pastel purple\", Color = \"#bcb3ff\"}, }; this.RichEditToolbar.CustomTextColorOptions = this.CustomTextColorOptions; Showing font size options By default, font size options are shown to the user when using the control out-of-the-box. If these options are not desired, set the ShowFontSizeOptions property to False . Showing text color options By default, text color options are shown to the user when using the control out-of-the-box. If these options are not desired, set the ShowTextColorOptions property to False . Showing list style options By default, list style options are shown to the user when using the control out-of-the-box. If these options are not desired, set the ShowListStyleOptions property to False ."
  },
  "articles/features/ui-controls-validator.html": {
    "href": "articles/features/ui-controls-validator.html",
    "title": "Using the InputValidator control | MADE Uno",
    "keywords": "Using the InputValidator control The MADE.UI.Controls.InputValidator element is a custom-built UI element wrapper for input controls that works with Uno's supported platforms that provides an input validation experience. Shown below is the visuals for the control in its default state validating a TextBox and DatePicker with input validators from the MADE.Data.Validation library. Example usage <Page x:Class=\"InputValidatorSample.MainPage\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:controls=\"using:MADE.UI.Controls\" xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\" mc:Ignorable=\"d\"> <RelativePanel Padding=\"12\"> <controls:InputValidator x:Name=\"TextBoxValidator\" Margin=\"0,12,0,0\" Input=\"{x:Bind TextBox.Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\" RelativePanel.AlignLeftWithPanel=\"True\" RelativePanel.AlignRightWithPanel=\"True\" RelativePanel.AlignTopWithPanel=\"True\"> <TextBox x:Name=\"TextBox\" Header=\"TextBox with InputValidator\" /> </controls:InputValidator> <controls:InputValidator x:Name=\"DatePickerValidator\" Margin=\"0,12,0,0\" Input=\"{Binding SelectedDate, Mode=TwoWay, ElementName=DatePicker, UpdateSourceTrigger=PropertyChanged}\" RelativePanel.AlignLeftWithPanel=\"True\" RelativePanel.AlignRightWithPanel=\"True\" RelativePanel.Below=\"TextBoxValidator\"> <DatePicker x:Name=\"DatePicker\" Header=\"DatePicker with InputValidator\" /> </controls:InputValidator> </RelativePanel> </Page> namespace InputValidatorSample { using System; using System.Collections.Generic; using System.Collections.ObjectModel; using System.Diagnostics; using global::Windows.UI.Xaml.Controls; using MADE.Data.Validation; using MADE.Data.Validation.Validators; using MADE.UI.Controls; public sealed partial class MainPage : Page { public MainPage() { this.InitializeComponent(); this.TextBoxValidator.Validators = new ValidatorCollection { new RequiredValidator(), new EmailValidator(), }; this.DatePickerValidator.Validators = new ValidatorCollection { new RequiredValidator(), new BetweenValidator(DateTimeOffset.Now, DateTimeOffset.Now.AddDays(7)), }; } } } Validating an input The InputValidator is designed in a way that it can be used with any input control, whether in-built like TextBox or custom-built like the MADE FilePicker control. Simply, the Input property of the validator needs to be bound to the input value reference from the wrapped input control that needs to be validated. You can then provide a ValidatorCollection instance from the Data Validation package , containing the IValidator instances that will be run on the input. This can either be a bound property in your view-model, set in your view code-behind, or defined in your XAML as a static resource. The implementation of using IValidator instances allows you to dynamically configure your validators based on other criteria of your view. For example, you might want to validate two DatePicker controls that define a min/max range. The validator for the maximum date could be dynamically updated so that its minimum value is defined based on the value of the minimum date picker. Extending input validation for your application's needs The validation of the InputValidator is based on IValidator instances from the Data Validation package. While the package provides a common set of validators for basic scenarios such as required, range, min, max, and email, you can create your own. Find more detail on creating your own custom IValidator types in our Data Validation article . Customizing the InputValidator The control has many customization properties that are exposed to tailor the experience for your application. FeedbackMessageStyle The FeedbackMessageStyle controls the styling applied to the TextBlock that displays the validator messages. The default user experience styling is shown at the top of this article."
  },
  "articles/features/ui-data-converters.html": {
    "href": "articles/features/ui-data-converters.html",
    "title": "Using the UI Data Converters package | MADE Uno",
    "keywords": "Using the UI Data Converters package The UI Data Converters package is designed for making the conversion of data objects to a different type in native applications for Windows, Android, iOS, macOS, Linux, and the web easier. Converting boolean values to a string (and back) with the BooleanToStringValueConverter The MADE.UI.Data.Converters.BooleanToStringValueConverter provides a way to convert a boolean value to a string and back with a bound data source in a XAML view. <Grid> <Grid.Resources> <converters:BooleanToStringValueConverter x:Key=\"BooleanToStringValueConverter\" TrueValue=\"Yes\" FalseValue=\"No\" /> </Grid.Resources> <!-- A true boolean will return the TrueValue of the converter --> <TextBlock Text=\"{x:Bind ViewModel.True, Converter={StaticResource BooleanToStringValueConverter}}\" /> <!-- A false boolean will return the FalseValue of the converter --> <TextBlock Text=\"{x:Bind ViewModel.False, Converter={StaticResource BooleanToStringValueConverter}}\" /> </Grid> Instances of the converter can be set up with varying values for the TrueValue and FalseValue properties that will represent the value shown when the boolean is true and false, respectively. The default values are Yes and No . Note , when converting back from the string value to a boolean when used in a TwoWay binding, the TrueValue and FalseValue properties are used to determine which value is considered true and false. If the string value does not match, an exception will be thrown. Displaying a byte array as an image with the ByteArrayToImageSourceValueConverter The MADE.UI.Data.Converters.ByteArrayToImageSourceValueConverter provides a way to convert a bound byte array containing the details of an image to an image source that can be bound to an Image XAML element. <Grid> <Grid.Resources> <converters:ByteArrayToImageSourceValueConverter x:Key=\"ByteArrayToImageSourceValueConverter\" /> </Grid.Resources> <!-- Converts the image's byte array into a source image that is loaded into the element --> <Image Source=\"{x:Bind ViewModel.ImageBytes, Converter={StaticResource ByteArrayToImageSourceValueConverter}, Mode=OneWay}\" /> </Grid> Formatting a DateTime value with the DateTimeToStringValueConverter The MADE.UI.Data.Converters.DateTimeToStringValueConverter converts a given DateTime object into a string using the provided format in the binding ConverterParameter property. <Grid> <Grid.Resources> <converters:DateTimeToStringValueConverter x:Key=\"DateTimeToStringValueConverter\" /> </Grid.Resources> <!-- Converts the DateTime object into the dd/MM/yyyy format --> <TextBlock Text=\"{x:Bind ViewModel.DateTime, Converter={StaticResource DateTimeToStringValueConverter}, ConverterParameter=dd/MM/yyyy}\" /> </Grid> Note , the converter supports any of the standard and custom formats supported by the DateTime.ToString() method. You can find more information on these in the Microsoft documentation ."
  },
  "articles/features/ui-styling.html": {
    "href": "articles/features/ui-styling.html",
    "title": "Using the UI Styling package | MADE Uno",
    "keywords": "Using the UI Styling package The UI Styling package is designed for improving the flow of designing native applications for Windows, Android, iOS, macOS, Linux, and the web. Converting HEX strings to colors and SolidColorBrush with ColorExtensions The MADE.UI.Styling.Colors.ColorExtensions provides a collection of extensions that can be used to manipulate System.Drawing.Color , Windows.UI.Color or Windows.UI.Xaml.Media.SolidColorBrush objects such as converting a HEX value to them and back. Below are some example usages for your applications built for Windows and the Uno Platform. Convert HEX String to Color and back example private void HexColorConversion() { Windows.UI.Color redWindowsColor = \"#FF0000\".ToWindowsColor(); System.Drawing.Color redSystemColor = \"#FF0000\".ToSystemColor(); string redHex = redColor.ToHexString(); // or redSystemColor.ToHexString(); } Note , the ToColor() extension for HEX strings supported both RGB and ARGB formats, taking into consideration the transparency layer. Convert Color to SolidColorBrush example private void ColorSolidColorBrushConversion() { SolidColorBrush redBrush = Windows.UI.Colors.Red.ToSolidColorBrush(); // or System.Drawing.Color.Red.ToSolidColorBrush(); }"
  },
  "articles/features/ui-view-management.html": {
    "href": "articles/features/ui-view-management.html",
    "title": "Using the UI View Management package | MADE Uno",
    "keywords": "Using the UI View Management package The UI View Management package is designed for improving how your applications can create and manage additional windows in Windows applications. Creating a new application window with a Page type Windows application developers working with a navigation Frame will be aware of the ease of use for navigating your applications with Page object types. You can simply call Navigate passing a parameter object. So why shouldn't creating a new window follow the same way. The WindowManager helper class provides a CreateNewWindowForPageAsync method with multiple overloads with this exact capability. Below is an example of launching a new application window with a page type. private async Task LaunchNewWindow() { await WindowManager.CreateNewWindowForPageAsync(typeof(MainPage), \"ParameterObject\"); } This example will launch a new Window with an initial page showing the MainPage , passing the string as a page navigation parameter. Accessing the window's CoreDispatcher When a new window is launched using the CreateNewWindowForPageAsync methods, the view's CoreDispatcher instance will be registered with the ViewCoreDispatcherManager instance. This can be accessed from anywhere in your application's executing code using the ViewCoreDispatcherManager.Current.Get method passing the identifier of the view. To keep an instance of the view ID associated with your page, when initializing your page class, you can retrieve the view ID using the following code. public MainPage() { var view = ApplicationView.GetForCurrentView(); this.ViewId = view?.Id ?? -1; } public int ViewId { get; }"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Getting Started | MADE Uno",
    "keywords": "Getting Started MADE Uno is a collection of components designed for building applications with the Uno Platform on Windows, Android, iOS, and WebAssembly. Installation All packages listed below can be installed via NuGet or via the dotnet CLI by running the following command using a listed package name: dotnet add package MADE.UI Available packages Package Version MADE.UI MADE.UI.Controls.ChipBox MADE.UI.Controls.DropDownList MADE.UI.Controls.FilePicker MADE.UI.Controls.RichEditToolbar MADE.UI.Controls.Validator MADE.UI.Data.Converters MADE.UI.Styling MADE.UI.ViewManagement UI The UI package is a base library for building out great user experiences for applications built for Windows, Android, iOS, and the web. Taking advantage of the Uno Platform, the UI packages provide extensible features such as: Control, a base implementation on top of the XAML Control type with additional functionality such as IsVisible (to get and set the state of the control's visibility), and GetChildView (to find and retrieve a UI element which is a child of the element). ContentControl, a base implementation on top of the XAML ContentControl type with additional functionality such as IsVisible (to get and set the state of the control's visibility), and GetChildView (to find and retrieve a UI element which is a child of the element). ViewExtensions, a collection of extensions for manipulating XAML UIElement objects including SetVisible (to toggle the visible state of the element and child elements). Discover UI UI.Controls.ChipBox The UI Controls ChipBox library contains a cross-platform UI element that provides a multi value input for a text box with auto-suggest capabilities. Values added are displayed as removable chips. Discover UI.Controls.ChipBox UI.Controls.DropDownList The UI Controls DropDownList library contains a Windows UI element that provides a selection user experience, allowing a user to select one or multiple items from a list. The control works in a similar way to the ComboBox element in the Windows SDK, with the added extensibility to change modes to select multiple items. Discover UI.Controls.DropDownList UI.Controls.FilePicker The UI Controls FilePicker library contains a cross-platform UI element that provides a web-like <input type=\"file\" /> equivalent for native applications. The control provides the capability to select one or multiple files of given types and show them within the UI. Discover UI.Controls.FilePicker UI.Controls.RichEditToolbar The UI Controls RichEditToolbar library contains a cross-platform UI element that provides customizable and extensible collection of buttons that activate rich text features in an associated RichEditBox. Think the InkToolbar equivalent for RichEditBox controls! Discover UI.Controls.RichEditToolbar UI.Controls.Validator The UI Controls Validator library contains a cross-platform UI element that provides validation capabilities over any input element. Taking advantage of the Data Validation library, you can simply and easily setup input validation with error messaging for all input types, both built-in and custom, with minimal effort. Discover UI.Controls.Validator UI.Data.Converters The UI Data Converters package is designed for making the conversion of data objects to a different type in native applications for Windows, Android, iOS, macOS, Linux, and the web easier. Discover UI.Data.Converters UI.Styling The UI Styling library contains a collection of cross-platform UI styling components for improving the designing of applications. Discover UI.Styling UI.ViewManagement The UI View Management package is designed for improving how your applications can create and manage additional windows in Windows applications. Discover UI.ViewManagement"
  },
  "index.html": {
    "href": "index.html",
    "title": "Make App Development Easier | MADE Uno",
    "keywords": "Make app development easier with reusable code MADE Uno is a collection of components designed for building applications with the Uno Platform on Windows, Android, iOS, and WebAssembly. Learn more Supports Windows UWP, WinUI Android 10.0+ iOS 10.0+ macOS Unified API Web WebAssembly (WASM) Stats v1.4.0 Latest release 225k+ Total downloads 22 NuGet packages UI Components MADE Uno provides a set of cross-platform UI components for Windows, WebAssembly, Android, iOS, macOS, and Linux. Get data validation in seconds MADE provides a lightweight, extensible data validation wrapper for input components in your applications Use the .NET Color you prefer Easy-to-use extensions for System.Drawing.Color and Windows.UI.Color to simplify the styling of your applications Manage application windows Save time building multi-window applications with the WindowManager, designed to simplify the creation of new application windows Easy cross-platform page-to-page navigation Ease your approach to cross-platform page-to-page navigation using MADE's page navigation service built on top of the MVVM Toolkit MADE Uno is simple to install and it's easy to get started. Learn more Support MADE Uno If you'd like to support MADE Uno, considering donating to the project Support MADE Uno Contribute on GitHub MADE Uno is open source and you can contribute on GitHub Contribute to MADE Uno"
  },
  "README.html": {
    "href": "README.html",
    "title": "MADE Uno Documentation | MADE Uno",
    "keywords": "MADE Uno Documentation This folder contains source code for the generation of MADE Uno's documentation. Contributing to the docs Install dependencies Download and install docfx on your computer. MacOS brew install docfx Windows choco install docfx Running locally docfx .\\docfx.json --serve This will run the docs on http://localhost:8080"
  }
}